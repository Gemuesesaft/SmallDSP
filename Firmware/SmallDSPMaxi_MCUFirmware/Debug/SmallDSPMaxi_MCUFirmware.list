
SmallDSPMaxi_MCUFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032b0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003370  08003370  00013370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033a8  080033a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080033a8  080033a8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033a8  080033a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033a8  080033a8  000133a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033ac  080033ac  000133ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  2000000c  080033bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  080033bc  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009bf3  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001828  00000000  00000000  00029c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a80  00000000  00000000  0002b498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000822  00000000  00000000  0002bf18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fdc5  00000000  00000000  0002c73a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c65a  00000000  00000000  0003c4ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005d1cf  00000000  00000000  00048b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002674  00000000  00000000  000a5d28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000a839c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003358 	.word	0x08003358

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003358 	.word	0x08003358

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <InitialiseCodecs>:

extern SPI_HandleTypeDef hspi1;

ak4619_Device_t codecs[NUMBER_OF_CODECS];

uint8_t InitialiseCodecs(void) {
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b088      	sub	sp, #32
 8000224:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8000226:	231e      	movs	r3, #30
 8000228:	18fb      	adds	r3, r7, r3
 800022a:	2200      	movs	r2, #0
 800022c:	701a      	strb	r2, [r3, #0]
	ak4619_AnalogInputMode_t inputModes[NUMBER_OF_CODECS] =
 800022e:	2410      	movs	r4, #16
 8000230:	193b      	adds	r3, r7, r4
 8000232:	4ac7      	ldr	r2, [pc, #796]	; (8000550 <InitialiseCodecs+0x330>)
 8000234:	ca03      	ldmia	r2!, {r0, r1}
 8000236:	c303      	stmia	r3!, {r0, r1}
			ak4619_PseudoDifferential,
			ak4619_PseudoDifferential
	};

#if NUMBER_OF_CODECS > 0
	HAL_GPIO_WritePin(EN_Codecs_1to4_GPIO_Port, EN_Codecs_1to4_Pin, GPIO_PIN_SET);
 8000238:	4bc6      	ldr	r3, [pc, #792]	; (8000554 <InitialiseCodecs+0x334>)
 800023a:	2201      	movs	r2, #1
 800023c:	2140      	movs	r1, #64	; 0x40
 800023e:	0018      	movs	r0, r3
 8000240:	f001 f936 	bl	80014b0 <HAL_GPIO_WritePin>
	codecs[0].NCSPin = NCS_Codec1_Pin;
 8000244:	4bc4      	ldr	r3, [pc, #784]	; (8000558 <InitialiseCodecs+0x338>)
 8000246:	2280      	movs	r2, #128	; 0x80
 8000248:	0052      	lsls	r2, r2, #1
 800024a:	811a      	strh	r2, [r3, #8]
	codecs[0].NCSPort = NCS_Codec1_GPIO_Port;
 800024c:	4bc2      	ldr	r3, [pc, #776]	; (8000558 <InitialiseCodecs+0x338>)
 800024e:	2290      	movs	r2, #144	; 0x90
 8000250:	05d2      	lsls	r2, r2, #23
 8000252:	60da      	str	r2, [r3, #12]
	codecs[0].inputMode = inputModes[0];
 8000254:	193b      	adds	r3, r7, r4
 8000256:	781a      	ldrb	r2, [r3, #0]
 8000258:	4bbf      	ldr	r3, [pc, #764]	; (8000558 <InitialiseCodecs+0x338>)
 800025a:	741a      	strb	r2, [r3, #16]
#endif
#if NUMBER_OF_CODECS > 1
	codecs[1].NCSPin = NCS_Codec2_Pin;
 800025c:	4bbe      	ldr	r3, [pc, #760]	; (8000558 <InitialiseCodecs+0x338>)
 800025e:	2280      	movs	r2, #128	; 0x80
 8000260:	0092      	lsls	r2, r2, #2
 8000262:	839a      	strh	r2, [r3, #28]
	codecs[1].NCSPort = NCS_Codec2_GPIO_Port;
 8000264:	4bbc      	ldr	r3, [pc, #752]	; (8000558 <InitialiseCodecs+0x338>)
 8000266:	2290      	movs	r2, #144	; 0x90
 8000268:	05d2      	lsls	r2, r2, #23
 800026a:	621a      	str	r2, [r3, #32]
	codecs[1].inputMode = inputModes[1];
 800026c:	193b      	adds	r3, r7, r4
 800026e:	7859      	ldrb	r1, [r3, #1]
 8000270:	4bb9      	ldr	r3, [pc, #740]	; (8000558 <InitialiseCodecs+0x338>)
 8000272:	2224      	movs	r2, #36	; 0x24
 8000274:	5499      	strb	r1, [r3, r2]
#endif
#if NUMBER_OF_CODECS > 2
	codecs[2].NCSPin = NCS_Codec3_Pin;
 8000276:	4bb8      	ldr	r3, [pc, #736]	; (8000558 <InitialiseCodecs+0x338>)
 8000278:	2280      	movs	r2, #128	; 0x80
 800027a:	00d2      	lsls	r2, r2, #3
 800027c:	861a      	strh	r2, [r3, #48]	; 0x30
	codecs[2].NCSPort = NCS_Codec3_GPIO_Port;
 800027e:	4bb6      	ldr	r3, [pc, #728]	; (8000558 <InitialiseCodecs+0x338>)
 8000280:	2290      	movs	r2, #144	; 0x90
 8000282:	05d2      	lsls	r2, r2, #23
 8000284:	635a      	str	r2, [r3, #52]	; 0x34
	codecs[2].inputMode = inputModes[2];
 8000286:	193b      	adds	r3, r7, r4
 8000288:	7899      	ldrb	r1, [r3, #2]
 800028a:	4bb3      	ldr	r3, [pc, #716]	; (8000558 <InitialiseCodecs+0x338>)
 800028c:	2238      	movs	r2, #56	; 0x38
 800028e:	5499      	strb	r1, [r3, r2]
#endif
#if NUMBER_OF_CODECS > 3
	codecs[3].NCSPin = NCS_Codec4_Pin;
 8000290:	4bb1      	ldr	r3, [pc, #708]	; (8000558 <InitialiseCodecs+0x338>)
 8000292:	2244      	movs	r2, #68	; 0x44
 8000294:	2180      	movs	r1, #128	; 0x80
 8000296:	0109      	lsls	r1, r1, #4
 8000298:	5299      	strh	r1, [r3, r2]
	codecs[3].NCSPort = NCS_Codec4_GPIO_Port;
 800029a:	4baf      	ldr	r3, [pc, #700]	; (8000558 <InitialiseCodecs+0x338>)
 800029c:	2290      	movs	r2, #144	; 0x90
 800029e:	05d2      	lsls	r2, r2, #23
 80002a0:	649a      	str	r2, [r3, #72]	; 0x48
	codecs[3].inputMode = inputModes[3];
 80002a2:	193b      	adds	r3, r7, r4
 80002a4:	78d9      	ldrb	r1, [r3, #3]
 80002a6:	4bac      	ldr	r3, [pc, #688]	; (8000558 <InitialiseCodecs+0x338>)
 80002a8:	224c      	movs	r2, #76	; 0x4c
 80002aa:	5499      	strb	r1, [r3, r2]
#endif
#if NUMBER_OF_CODECS > 4
	HAL_GPIO_WritePin(EN_Codecs_5to8_GPIO_Port, EN_Codecs_5to8_Pin, GPIO_PIN_SET);
 80002ac:	4ba9      	ldr	r3, [pc, #676]	; (8000554 <InitialiseCodecs+0x334>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	2180      	movs	r1, #128	; 0x80
 80002b2:	0018      	movs	r0, r3
 80002b4:	f001 f8fc 	bl	80014b0 <HAL_GPIO_WritePin>
	codecs[4].NCSPin = NCS_Codec5_Pin;
 80002b8:	4ba7      	ldr	r3, [pc, #668]	; (8000558 <InitialiseCodecs+0x338>)
 80002ba:	2258      	movs	r2, #88	; 0x58
 80002bc:	2180      	movs	r1, #128	; 0x80
 80002be:	0149      	lsls	r1, r1, #5
 80002c0:	5299      	strh	r1, [r3, r2]
	codecs[4].NCSPort = NCS_Codec5_GPIO_Port;
 80002c2:	4ba5      	ldr	r3, [pc, #660]	; (8000558 <InitialiseCodecs+0x338>)
 80002c4:	4aa5      	ldr	r2, [pc, #660]	; (800055c <InitialiseCodecs+0x33c>)
 80002c6:	65da      	str	r2, [r3, #92]	; 0x5c
	codecs[4].inputMode = inputModes[4];
 80002c8:	193b      	adds	r3, r7, r4
 80002ca:	7919      	ldrb	r1, [r3, #4]
 80002cc:	4ba2      	ldr	r3, [pc, #648]	; (8000558 <InitialiseCodecs+0x338>)
 80002ce:	2260      	movs	r2, #96	; 0x60
 80002d0:	5499      	strb	r1, [r3, r2]
#endif
#if NUMBER_OF_CODECS > 5
	codecs[5].NCSPin = NCS_Codec6_Pin;
 80002d2:	4ba1      	ldr	r3, [pc, #644]	; (8000558 <InitialiseCodecs+0x338>)
 80002d4:	226c      	movs	r2, #108	; 0x6c
 80002d6:	2180      	movs	r1, #128	; 0x80
 80002d8:	0189      	lsls	r1, r1, #6
 80002da:	5299      	strh	r1, [r3, r2]
	codecs[5].NCSPort = NCS_Codec6_GPIO_Port;
 80002dc:	4b9e      	ldr	r3, [pc, #632]	; (8000558 <InitialiseCodecs+0x338>)
 80002de:	4a9f      	ldr	r2, [pc, #636]	; (800055c <InitialiseCodecs+0x33c>)
 80002e0:	671a      	str	r2, [r3, #112]	; 0x70
	codecs[5].inputMode = inputModes[5];
 80002e2:	193b      	adds	r3, r7, r4
 80002e4:	7959      	ldrb	r1, [r3, #5]
 80002e6:	4b9c      	ldr	r3, [pc, #624]	; (8000558 <InitialiseCodecs+0x338>)
 80002e8:	2274      	movs	r2, #116	; 0x74
 80002ea:	5499      	strb	r1, [r3, r2]
#endif
#if NUMBER_OF_CODECS > 6
	codecs[6].NCSPin = NCS_Codec7_Pin;
 80002ec:	4b9a      	ldr	r3, [pc, #616]	; (8000558 <InitialiseCodecs+0x338>)
 80002ee:	2280      	movs	r2, #128	; 0x80
 80002f0:	2180      	movs	r1, #128	; 0x80
 80002f2:	01c9      	lsls	r1, r1, #7
 80002f4:	5299      	strh	r1, [r3, r2]
	codecs[6].NCSPort = NCS_Codec7_GPIO_Port;
 80002f6:	4b98      	ldr	r3, [pc, #608]	; (8000558 <InitialiseCodecs+0x338>)
 80002f8:	2284      	movs	r2, #132	; 0x84
 80002fa:	4998      	ldr	r1, [pc, #608]	; (800055c <InitialiseCodecs+0x33c>)
 80002fc:	5099      	str	r1, [r3, r2]
	codecs[6].inputMode = inputModes[6];
 80002fe:	193b      	adds	r3, r7, r4
 8000300:	7999      	ldrb	r1, [r3, #6]
 8000302:	4b95      	ldr	r3, [pc, #596]	; (8000558 <InitialiseCodecs+0x338>)
 8000304:	2288      	movs	r2, #136	; 0x88
 8000306:	5499      	strb	r1, [r3, r2]
#endif
#if NUMBER_OF_CODECS > 7
	codecs[7].NCSPin = NCS_Codec8_Pin;
 8000308:	4b93      	ldr	r3, [pc, #588]	; (8000558 <InitialiseCodecs+0x338>)
 800030a:	2294      	movs	r2, #148	; 0x94
 800030c:	4994      	ldr	r1, [pc, #592]	; (8000560 <InitialiseCodecs+0x340>)
 800030e:	5299      	strh	r1, [r3, r2]
	codecs[7].NCSPort = NCS_Codec8_GPIO_Port;
 8000310:	4b91      	ldr	r3, [pc, #580]	; (8000558 <InitialiseCodecs+0x338>)
 8000312:	2298      	movs	r2, #152	; 0x98
 8000314:	4991      	ldr	r1, [pc, #580]	; (800055c <InitialiseCodecs+0x33c>)
 8000316:	5099      	str	r1, [r3, r2]
	codecs[7].inputMode = inputModes[7];
 8000318:	193b      	adds	r3, r7, r4
 800031a:	79d9      	ldrb	r1, [r3, #7]
 800031c:	4b8e      	ldr	r3, [pc, #568]	; (8000558 <InitialiseCodecs+0x338>)
 800031e:	229c      	movs	r2, #156	; 0x9c
 8000320:	5499      	strb	r1, [r3, r2]
#endif
	HAL_Delay(100);
 8000322:	2064      	movs	r0, #100	; 0x64
 8000324:	f000 fe7c 	bl	8001020 <HAL_Delay>
	uint8_t muteAllADCs = 0b01100000;
 8000328:	231d      	movs	r3, #29
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	2260      	movs	r2, #96	; 0x60
 800032e:	701a      	strb	r2, [r3, #0]
	uint8_t turnOnADCs = 0b00000000;
 8000330:	231c      	movs	r3, #28
 8000332:	18fb      	adds	r3, r7, r3
 8000334:	2200      	movs	r2, #0
 8000336:	701a      	strb	r2, [r3, #0]
	uint8_t muteAllDACs = 0b00110000;
 8000338:	231b      	movs	r3, #27
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	2230      	movs	r2, #48	; 0x30
 800033e:	701a      	strb	r2, [r3, #0]
	uint8_t enableAllCodecs = 0b00110111;
 8000340:	230f      	movs	r3, #15
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	2237      	movs	r2, #55	; 0x37
 8000346:	701a      	strb	r2, [r3, #0]
	uint8_t tdm128I2SMode[2] = {0b10101100, 0b00011100};
 8000348:	230c      	movs	r3, #12
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	4a85      	ldr	r2, [pc, #532]	; (8000564 <InitialiseCodecs+0x344>)
 800034e:	801a      	strh	r2, [r3, #0]
	uint8_t dacSharpFilter = 0b00000000;
 8000350:	230b      	movs	r3, #11
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	2200      	movs	r2, #0
 8000356:	701a      	strb	r2, [r3, #0]
	uint8_t spiInit = 0b00000000;
 8000358:	210a      	movs	r1, #10
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2200      	movs	r2, #0
 800035e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, &spiInit, 1, 100);
 8000360:	1879      	adds	r1, r7, r1
 8000362:	4881      	ldr	r0, [pc, #516]	; (8000568 <InitialiseCodecs+0x348>)
 8000364:	2364      	movs	r3, #100	; 0x64
 8000366:	2201      	movs	r2, #1
 8000368:	f002 fb12 	bl	8002990 <HAL_SPI_Transmit>
	for(uint8_t i = 0; i < NUMBER_OF_CODECS; i++) {
 800036c:	231f      	movs	r3, #31
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	2200      	movs	r2, #0
 8000372:	701a      	strb	r2, [r3, #0]
 8000374:	e0e1      	b.n	800053a <InitialiseCodecs+0x31a>
		uint8_t adcInputMode = codecs[i].inputMode | (codecs[i].inputMode << 2) | (codecs[i].inputMode << 4) | (codecs[i].inputMode << 6);
 8000376:	241f      	movs	r4, #31
 8000378:	193b      	adds	r3, r7, r4
 800037a:	781a      	ldrb	r2, [r3, #0]
 800037c:	4976      	ldr	r1, [pc, #472]	; (8000558 <InitialiseCodecs+0x338>)
 800037e:	0013      	movs	r3, r2
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	189b      	adds	r3, r3, r2
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	18cb      	adds	r3, r1, r3
 8000388:	3310      	adds	r3, #16
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	b259      	sxtb	r1, r3
 800038e:	193b      	adds	r3, r7, r4
 8000390:	781a      	ldrb	r2, [r3, #0]
 8000392:	4871      	ldr	r0, [pc, #452]	; (8000558 <InitialiseCodecs+0x338>)
 8000394:	0013      	movs	r3, r2
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	189b      	adds	r3, r3, r2
 800039a:	009b      	lsls	r3, r3, #2
 800039c:	18c3      	adds	r3, r0, r3
 800039e:	3310      	adds	r3, #16
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	b25b      	sxtb	r3, r3
 80003a6:	430b      	orrs	r3, r1
 80003a8:	b259      	sxtb	r1, r3
 80003aa:	193b      	adds	r3, r7, r4
 80003ac:	781a      	ldrb	r2, [r3, #0]
 80003ae:	486a      	ldr	r0, [pc, #424]	; (8000558 <InitialiseCodecs+0x338>)
 80003b0:	0013      	movs	r3, r2
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	189b      	adds	r3, r3, r2
 80003b6:	009b      	lsls	r3, r3, #2
 80003b8:	18c3      	adds	r3, r0, r3
 80003ba:	3310      	adds	r3, #16
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	011b      	lsls	r3, r3, #4
 80003c0:	b25b      	sxtb	r3, r3
 80003c2:	430b      	orrs	r3, r1
 80003c4:	b259      	sxtb	r1, r3
 80003c6:	193b      	adds	r3, r7, r4
 80003c8:	781a      	ldrb	r2, [r3, #0]
 80003ca:	4863      	ldr	r0, [pc, #396]	; (8000558 <InitialiseCodecs+0x338>)
 80003cc:	0013      	movs	r3, r2
 80003ce:	009b      	lsls	r3, r3, #2
 80003d0:	189b      	adds	r3, r3, r2
 80003d2:	009b      	lsls	r3, r3, #2
 80003d4:	18c3      	adds	r3, r0, r3
 80003d6:	3310      	adds	r3, #16
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	019b      	lsls	r3, r3, #6
 80003dc:	b25b      	sxtb	r3, r3
 80003de:	430b      	orrs	r3, r1
 80003e0:	b25b      	sxtb	r3, r3
 80003e2:	b2da      	uxtb	r2, r3
 80003e4:	2309      	movs	r3, #9
 80003e6:	18fb      	adds	r3, r7, r3
 80003e8:	701a      	strb	r2, [r3, #0]
		codecs[i].mcuInterface = ak4619_SPI;
 80003ea:	193b      	adds	r3, r7, r4
 80003ec:	781a      	ldrb	r2, [r3, #0]
 80003ee:	495a      	ldr	r1, [pc, #360]	; (8000558 <InitialiseCodecs+0x338>)
 80003f0:	0013      	movs	r3, r2
 80003f2:	009b      	lsls	r3, r3, #2
 80003f4:	189b      	adds	r3, r3, r2
 80003f6:	009b      	lsls	r3, r3, #2
 80003f8:	2202      	movs	r2, #2
 80003fa:	545a      	strb	r2, [r3, r1]
		codecs[i].hspi = &hspi1;
 80003fc:	193b      	adds	r3, r7, r4
 80003fe:	781a      	ldrb	r2, [r3, #0]
 8000400:	4955      	ldr	r1, [pc, #340]	; (8000558 <InitialiseCodecs+0x338>)
 8000402:	0013      	movs	r3, r2
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	189b      	adds	r3, r3, r2
 8000408:	009b      	lsls	r3, r3, #2
 800040a:	18cb      	adds	r3, r1, r3
 800040c:	3304      	adds	r3, #4
 800040e:	4a56      	ldr	r2, [pc, #344]	; (8000568 <InitialiseCodecs+0x348>)
 8000410:	601a      	str	r2, [r3, #0]
		status = AK4619_Init(&codecs[i]);
 8000412:	193b      	adds	r3, r7, r4
 8000414:	781a      	ldrb	r2, [r3, #0]
 8000416:	0013      	movs	r3, r2
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	189b      	adds	r3, r3, r2
 800041c:	009b      	lsls	r3, r3, #2
 800041e:	4a4e      	ldr	r2, [pc, #312]	; (8000558 <InitialiseCodecs+0x338>)
 8000420:	189b      	adds	r3, r3, r2
 8000422:	251e      	movs	r5, #30
 8000424:	197c      	adds	r4, r7, r5
 8000426:	0018      	movs	r0, r3
 8000428:	f000 fd13 	bl	8000e52 <AK4619_Init>
 800042c:	0003      	movs	r3, r0
 800042e:	7023      	strb	r3, [r4, #0]
		if(status)
 8000430:	197b      	adds	r3, r7, r5
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d002      	beq.n	800043e <InitialiseCodecs+0x21e>
			return status;
 8000438:	197b      	adds	r3, r7, r5
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	e084      	b.n	8000548 <InitialiseCodecs+0x328>
			return status;
		status = AK4619_SetRegister_DACMuteAndFilterSettingsReg(&codecs[i], &muteAllDACs);
		if(status)
			return status;
		*/
		status = AK4619_SetRegister_PowerManagementReg(&codecs[i], &enableAllCodecs);
 800043e:	231f      	movs	r3, #31
 8000440:	18fb      	adds	r3, r7, r3
 8000442:	781a      	ldrb	r2, [r3, #0]
 8000444:	0013      	movs	r3, r2
 8000446:	009b      	lsls	r3, r3, #2
 8000448:	189b      	adds	r3, r3, r2
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	4a42      	ldr	r2, [pc, #264]	; (8000558 <InitialiseCodecs+0x338>)
 800044e:	189b      	adds	r3, r3, r2
 8000450:	251e      	movs	r5, #30
 8000452:	197c      	adds	r4, r7, r5
 8000454:	220f      	movs	r2, #15
 8000456:	18ba      	adds	r2, r7, r2
 8000458:	0011      	movs	r1, r2
 800045a:	0018      	movs	r0, r3
 800045c:	f000 fd12 	bl	8000e84 <AK4619_SetRegister_PowerManagementReg>
 8000460:	0003      	movs	r3, r0
 8000462:	7023      	strb	r3, [r4, #0]
		if(status)
 8000464:	197b      	adds	r3, r7, r5
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d002      	beq.n	8000472 <InitialiseCodecs+0x252>
			return status;
 800046c:	197b      	adds	r3, r7, r5
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	e06a      	b.n	8000548 <InitialiseCodecs+0x328>
		status = AK4619_SetRegister_AudioInterfaceFormatReg(&codecs[i], tdm128I2SMode);
 8000472:	231f      	movs	r3, #31
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	781a      	ldrb	r2, [r3, #0]
 8000478:	0013      	movs	r3, r2
 800047a:	009b      	lsls	r3, r3, #2
 800047c:	189b      	adds	r3, r3, r2
 800047e:	009b      	lsls	r3, r3, #2
 8000480:	4a35      	ldr	r2, [pc, #212]	; (8000558 <InitialiseCodecs+0x338>)
 8000482:	189b      	adds	r3, r3, r2
 8000484:	251e      	movs	r5, #30
 8000486:	197c      	adds	r4, r7, r5
 8000488:	220c      	movs	r2, #12
 800048a:	18ba      	adds	r2, r7, r2
 800048c:	0011      	movs	r1, r2
 800048e:	0018      	movs	r0, r3
 8000490:	f000 fd08 	bl	8000ea4 <AK4619_SetRegister_AudioInterfaceFormatReg>
 8000494:	0003      	movs	r3, r0
 8000496:	7023      	strb	r3, [r4, #0]
		if(status)
 8000498:	197b      	adds	r3, r7, r5
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d002      	beq.n	80004a6 <InitialiseCodecs+0x286>
			return status;
 80004a0:	197b      	adds	r3, r7, r5
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	e050      	b.n	8000548 <InitialiseCodecs+0x328>
		status = AK4619_SetRegister_ADCAnalogInputReg(&codecs[i], &adcInputMode);
 80004a6:	231f      	movs	r3, #31
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	781a      	ldrb	r2, [r3, #0]
 80004ac:	0013      	movs	r3, r2
 80004ae:	009b      	lsls	r3, r3, #2
 80004b0:	189b      	adds	r3, r3, r2
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	4a28      	ldr	r2, [pc, #160]	; (8000558 <InitialiseCodecs+0x338>)
 80004b6:	189b      	adds	r3, r3, r2
 80004b8:	251e      	movs	r5, #30
 80004ba:	197c      	adds	r4, r7, r5
 80004bc:	2209      	movs	r2, #9
 80004be:	18ba      	adds	r2, r7, r2
 80004c0:	0011      	movs	r1, r2
 80004c2:	0018      	movs	r0, r3
 80004c4:	f000 fd28 	bl	8000f18 <AK4619_SetRegister_ADCAnalogInputReg>
 80004c8:	0003      	movs	r3, r0
 80004ca:	7023      	strb	r3, [r4, #0]
		if(status)
 80004cc:	197b      	adds	r3, r7, r5
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d002      	beq.n	80004da <InitialiseCodecs+0x2ba>
			return status;
 80004d4:	197b      	adds	r3, r7, r5
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	e036      	b.n	8000548 <InitialiseCodecs+0x328>
		status = AK4619_SetRegister_DACMuteAndFilterSettingsReg(&codecs[i], &dacSharpFilter);
 80004da:	231f      	movs	r3, #31
 80004dc:	18fb      	adds	r3, r7, r3
 80004de:	781a      	ldrb	r2, [r3, #0]
 80004e0:	0013      	movs	r3, r2
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	189b      	adds	r3, r3, r2
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	4a1b      	ldr	r2, [pc, #108]	; (8000558 <InitialiseCodecs+0x338>)
 80004ea:	189b      	adds	r3, r3, r2
 80004ec:	251e      	movs	r5, #30
 80004ee:	197c      	adds	r4, r7, r5
 80004f0:	220b      	movs	r2, #11
 80004f2:	18ba      	adds	r2, r7, r2
 80004f4:	0011      	movs	r1, r2
 80004f6:	0018      	movs	r0, r3
 80004f8:	f000 fd1e 	bl	8000f38 <AK4619_SetRegister_DACMuteAndFilterSettingsReg>
 80004fc:	0003      	movs	r3, r0
 80004fe:	7023      	strb	r3, [r4, #0]
		if(status)
 8000500:	197b      	adds	r3, r7, r5
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d002      	beq.n	800050e <InitialiseCodecs+0x2ee>
			return status;
 8000508:	197b      	adds	r3, r7, r5
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	e01c      	b.n	8000548 <InitialiseCodecs+0x328>
		/*
		status = AK4619_SetRegister_ADCMuteAndHPFControlReg(&codecs[i], &turnOnADCs);
		if(status)
			return status;
		*/
		uint8_t test[2] = {0};
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	2200      	movs	r2, #0
 8000512:	801a      	strh	r2, [r3, #0]
		AK4619_GetRegister_AudioInterfaceFormatReg(&codecs[i], test);
 8000514:	241f      	movs	r4, #31
 8000516:	193b      	adds	r3, r7, r4
 8000518:	781a      	ldrb	r2, [r3, #0]
 800051a:	0013      	movs	r3, r2
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	189b      	adds	r3, r3, r2
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <InitialiseCodecs+0x338>)
 8000524:	189b      	adds	r3, r3, r2
 8000526:	1d3a      	adds	r2, r7, #4
 8000528:	0011      	movs	r1, r2
 800052a:	0018      	movs	r0, r3
 800052c:	f000 fcd7 	bl	8000ede <AK4619_GetRegister_AudioInterfaceFormatReg>
	for(uint8_t i = 0; i < NUMBER_OF_CODECS; i++) {
 8000530:	193b      	adds	r3, r7, r4
 8000532:	781a      	ldrb	r2, [r3, #0]
 8000534:	193b      	adds	r3, r7, r4
 8000536:	3201      	adds	r2, #1
 8000538:	701a      	strb	r2, [r3, #0]
 800053a:	231f      	movs	r3, #31
 800053c:	18fb      	adds	r3, r7, r3
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b07      	cmp	r3, #7
 8000542:	d800      	bhi.n	8000546 <InitialiseCodecs+0x326>
 8000544:	e717      	b.n	8000376 <InitialiseCodecs+0x156>
	}
	return EXIT_SUCCESS;
 8000546:	2300      	movs	r3, #0
}
 8000548:	0018      	movs	r0, r3
 800054a:	46bd      	mov	sp, r7
 800054c:	b008      	add	sp, #32
 800054e:	bdb0      	pop	{r4, r5, r7, pc}
 8000550:	08003370 	.word	0x08003370
 8000554:	48001400 	.word	0x48001400
 8000558:	20000028 	.word	0x20000028
 800055c:	48000400 	.word	0x48000400
 8000560:	ffff8000 	.word	0xffff8000
 8000564:	00001cac 	.word	0x00001cac
 8000568:	200000c8 	.word	0x200000c8

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t status = 0;
 8000572:	1dfb      	adds	r3, r7, #7
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fcee 	bl	8000f58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f81e 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f8a2 	bl	80006c8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000584:	f000 f862 	bl	800064c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(ErrorFlag_GPIO_Port, ErrorFlag_Pin, GPIO_PIN_RESET);
 8000588:	2380      	movs	r3, #128	; 0x80
 800058a:	0159      	lsls	r1, r3, #5
 800058c:	2390      	movs	r3, #144	; 0x90
 800058e:	05db      	lsls	r3, r3, #23
 8000590:	2200      	movs	r2, #0
 8000592:	0018      	movs	r0, r3
 8000594:	f000 ff8c 	bl	80014b0 <HAL_GPIO_WritePin>
  status = InitialiseCodecs();
 8000598:	1dfc      	adds	r4, r7, #7
 800059a:	f7ff fe41 	bl	8000220 <InitialiseCodecs>
 800059e:	0003      	movs	r3, r0
 80005a0:	7023      	strb	r3, [r4, #0]
  if(status)
 80005a2:	1dfb      	adds	r3, r7, #7
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d007      	beq.n	80005ba <main+0x4e>
	  HAL_GPIO_WritePin(ErrorFlag_GPIO_Port, ErrorFlag_Pin, GPIO_PIN_SET);
 80005aa:	2380      	movs	r3, #128	; 0x80
 80005ac:	0159      	lsls	r1, r3, #5
 80005ae:	2390      	movs	r3, #144	; 0x90
 80005b0:	05db      	lsls	r3, r3, #23
 80005b2:	2201      	movs	r2, #1
 80005b4:	0018      	movs	r0, r3
 80005b6:	f000 ff7b 	bl	80014b0 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ba:	e7fe      	b.n	80005ba <main+0x4e>

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b091      	sub	sp, #68	; 0x44
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	2410      	movs	r4, #16
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	0018      	movs	r0, r3
 80005c8:	2330      	movs	r3, #48	; 0x30
 80005ca:	001a      	movs	r2, r3
 80005cc:	2100      	movs	r1, #0
 80005ce:	f002 fe97 	bl	8003300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d2:	003b      	movs	r3, r7
 80005d4:	0018      	movs	r0, r3
 80005d6:	2310      	movs	r3, #16
 80005d8:	001a      	movs	r2, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	f002 fe90 	bl	8003300 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e0:	0021      	movs	r1, r4
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2201      	movs	r2, #1
 80005e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2201      	movs	r2, #1
 80005ec:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2202      	movs	r2, #2
 80005f2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	0252      	lsls	r2, r2, #9
 80005fa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	0312      	lsls	r2, r2, #12
 8000602:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2200      	movs	r2, #0
 8000608:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060a:	187b      	adds	r3, r7, r1
 800060c:	0018      	movs	r0, r3
 800060e:	f001 fcc9 	bl	8001fa4 <HAL_RCC_OscConfig>
 8000612:	1e03      	subs	r3, r0, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000616:	f000 f931 	bl	800087c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061a:	003b      	movs	r3, r7
 800061c:	2207      	movs	r2, #7
 800061e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000620:	003b      	movs	r3, r7
 8000622:	2202      	movs	r2, #2
 8000624:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000626:	003b      	movs	r3, r7
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062c:	003b      	movs	r3, r7
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000632:	003b      	movs	r3, r7
 8000634:	2101      	movs	r1, #1
 8000636:	0018      	movs	r0, r3
 8000638:	f001 ffce 	bl	80025d8 <HAL_RCC_ClockConfig>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000640:	f000 f91c 	bl	800087c <Error_Handler>
  }
}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	b011      	add	sp, #68	; 0x44
 800064a:	bd90      	pop	{r4, r7, pc}

0800064c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000650:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <MX_SPI1_Init+0x74>)
 8000652:	4a1c      	ldr	r2, [pc, #112]	; (80006c4 <MX_SPI1_Init+0x78>)
 8000654:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000656:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <MX_SPI1_Init+0x74>)
 8000658:	2282      	movs	r2, #130	; 0x82
 800065a:	0052      	lsls	r2, r2, #1
 800065c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800065e:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <MX_SPI1_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000664:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <MX_SPI1_Init+0x74>)
 8000666:	22e0      	movs	r2, #224	; 0xe0
 8000668:	00d2      	lsls	r2, r2, #3
 800066a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <MX_SPI1_Init+0x74>)
 800066e:	2202      	movs	r2, #2
 8000670:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <MX_SPI1_Init+0x74>)
 8000674:	2201      	movs	r2, #1
 8000676:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_SPI1_Init+0x74>)
 800067a:	2280      	movs	r2, #128	; 0x80
 800067c:	0092      	lsls	r2, r2, #2
 800067e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000680:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_SPI1_Init+0x74>)
 8000682:	2210      	movs	r2, #16
 8000684:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_SPI1_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <MX_SPI1_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <MX_SPI1_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_SPI1_Init+0x74>)
 800069a:	2207      	movs	r2, #7
 800069c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <MX_SPI1_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_SPI1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <MX_SPI1_Init+0x74>)
 80006ac:	0018      	movs	r0, r3
 80006ae:	f002 f8b7 	bl	8002820 <HAL_SPI_Init>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d001      	beq.n	80006ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006b6:	f000 f8e1 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	200000c8 	.word	0x200000c8
 80006c4:	40013000 	.word	0x40013000

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b089      	sub	sp, #36	; 0x24
 80006cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	240c      	movs	r4, #12
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	0018      	movs	r0, r3
 80006d4:	2314      	movs	r3, #20
 80006d6:	001a      	movs	r2, r3
 80006d8:	2100      	movs	r1, #0
 80006da:	f002 fe11 	bl	8003300 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006de:	4b63      	ldr	r3, [pc, #396]	; (800086c <MX_GPIO_Init+0x1a4>)
 80006e0:	695a      	ldr	r2, [r3, #20]
 80006e2:	4b62      	ldr	r3, [pc, #392]	; (800086c <MX_GPIO_Init+0x1a4>)
 80006e4:	2180      	movs	r1, #128	; 0x80
 80006e6:	03c9      	lsls	r1, r1, #15
 80006e8:	430a      	orrs	r2, r1
 80006ea:	615a      	str	r2, [r3, #20]
 80006ec:	4b5f      	ldr	r3, [pc, #380]	; (800086c <MX_GPIO_Init+0x1a4>)
 80006ee:	695a      	ldr	r2, [r3, #20]
 80006f0:	2380      	movs	r3, #128	; 0x80
 80006f2:	03db      	lsls	r3, r3, #15
 80006f4:	4013      	ands	r3, r2
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b5c      	ldr	r3, [pc, #368]	; (800086c <MX_GPIO_Init+0x1a4>)
 80006fc:	695a      	ldr	r2, [r3, #20]
 80006fe:	4b5b      	ldr	r3, [pc, #364]	; (800086c <MX_GPIO_Init+0x1a4>)
 8000700:	2180      	movs	r1, #128	; 0x80
 8000702:	0289      	lsls	r1, r1, #10
 8000704:	430a      	orrs	r2, r1
 8000706:	615a      	str	r2, [r3, #20]
 8000708:	4b58      	ldr	r3, [pc, #352]	; (800086c <MX_GPIO_Init+0x1a4>)
 800070a:	695a      	ldr	r2, [r3, #20]
 800070c:	2380      	movs	r3, #128	; 0x80
 800070e:	029b      	lsls	r3, r3, #10
 8000710:	4013      	ands	r3, r2
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	4b55      	ldr	r3, [pc, #340]	; (800086c <MX_GPIO_Init+0x1a4>)
 8000718:	695a      	ldr	r2, [r3, #20]
 800071a:	4b54      	ldr	r3, [pc, #336]	; (800086c <MX_GPIO_Init+0x1a4>)
 800071c:	2180      	movs	r1, #128	; 0x80
 800071e:	02c9      	lsls	r1, r1, #11
 8000720:	430a      	orrs	r2, r1
 8000722:	615a      	str	r2, [r3, #20]
 8000724:	4b51      	ldr	r3, [pc, #324]	; (800086c <MX_GPIO_Init+0x1a4>)
 8000726:	695a      	ldr	r2, [r3, #20]
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	02db      	lsls	r3, r3, #11
 800072c:	4013      	ands	r3, r2
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|ErrorFlag_Pin, GPIO_PIN_RESET);
 8000732:	2384      	movs	r3, #132	; 0x84
 8000734:	0159      	lsls	r1, r3, #5
 8000736:	2390      	movs	r3, #144	; 0x90
 8000738:	05db      	lsls	r3, r3, #23
 800073a:	2200      	movs	r2, #0
 800073c:	0018      	movs	r0, r3
 800073e:	f000 feb7 	bl	80014b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000742:	4b4b      	ldr	r3, [pc, #300]	; (8000870 <MX_GPIO_Init+0x1a8>)
 8000744:	2200      	movs	r2, #0
 8000746:	2106      	movs	r1, #6
 8000748:	0018      	movs	r0, r3
 800074a:	f000 feb1 	bl	80014b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRST_DSP_Pin|NCS_Codec5_Pin|NCS_Codec6_Pin|NCS_Codec7_Pin
 800074e:	23f4      	movs	r3, #244	; 0xf4
 8000750:	021b      	lsls	r3, r3, #8
 8000752:	4847      	ldr	r0, [pc, #284]	; (8000870 <MX_GPIO_Init+0x1a8>)
 8000754:	2201      	movs	r2, #1
 8000756:	0019      	movs	r1, r3
 8000758:	f000 feaa 	bl	80014b0 <HAL_GPIO_WritePin>
                          |NCS_Codec8_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NCS_Codec1_Pin|NCS_Codec2_Pin|NCS_Codec3_Pin|NCS_Codec4_Pin, GPIO_PIN_SET);
 800075c:	23f0      	movs	r3, #240	; 0xf0
 800075e:	0119      	lsls	r1, r3, #4
 8000760:	2390      	movs	r3, #144	; 0x90
 8000762:	05db      	lsls	r3, r3, #23
 8000764:	2201      	movs	r2, #1
 8000766:	0018      	movs	r0, r3
 8000768:	f000 fea2 	bl	80014b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, EN_Codecs_1to4_Pin|EN_Codecs_5to8_Pin, GPIO_PIN_RESET);
 800076c:	4b41      	ldr	r3, [pc, #260]	; (8000874 <MX_GPIO_Init+0x1ac>)
 800076e:	2200      	movs	r2, #0
 8000770:	21c0      	movs	r1, #192	; 0xc0
 8000772:	0018      	movs	r0, r3
 8000774:	f000 fe9c 	bl	80014b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DSP_GPIO6_Pin DSP_GPIO7_Pin DSP_GPIO14_Pin DSP_GPIO15_Pin */
  GPIO_InitStruct.Pin = DSP_GPIO6_Pin|DSP_GPIO7_Pin|DSP_GPIO14_Pin|DSP_GPIO15_Pin;
 8000778:	193b      	adds	r3, r7, r4
 800077a:	2278      	movs	r2, #120	; 0x78
 800077c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077e:	193b      	adds	r3, r7, r4
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	193b      	adds	r3, r7, r4
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078a:	193a      	adds	r2, r7, r4
 800078c:	2390      	movs	r3, #144	; 0x90
 800078e:	05db      	lsls	r3, r3, #23
 8000790:	0011      	movs	r1, r2
 8000792:	0018      	movs	r0, r3
 8000794:	f000 fd1c 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin ErrorFlag_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|ErrorFlag_Pin;
 8000798:	0021      	movs	r1, r4
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2284      	movs	r2, #132	; 0x84
 800079e:	0152      	lsls	r2, r2, #5
 80007a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	000c      	movs	r4, r1
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	2201      	movs	r2, #1
 80007a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	193a      	adds	r2, r7, r4
 80007b8:	2390      	movs	r3, #144	; 0x90
 80007ba:	05db      	lsls	r3, r3, #23
 80007bc:	0011      	movs	r1, r2
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 fd06 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin NRST_DSP_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|NRST_DSP_Pin;
 80007c4:	193b      	adds	r3, r7, r4
 80007c6:	4a2c      	ldr	r2, [pc, #176]	; (8000878 <MX_GPIO_Init+0x1b0>)
 80007c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	2201      	movs	r2, #1
 80007ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	193b      	adds	r3, r7, r4
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	4a24      	ldr	r2, [pc, #144]	; (8000870 <MX_GPIO_Init+0x1a8>)
 80007e0:	0019      	movs	r1, r3
 80007e2:	0010      	movs	r0, r2
 80007e4:	f000 fcf4 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_Codec5_Pin NCS_Codec6_Pin NCS_Codec7_Pin NCS_Codec8_Pin */
  GPIO_InitStruct.Pin = NCS_Codec5_Pin|NCS_Codec6_Pin|NCS_Codec7_Pin|NCS_Codec8_Pin;
 80007e8:	0021      	movs	r1, r4
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	22f0      	movs	r2, #240	; 0xf0
 80007ee:	0212      	lsls	r2, r2, #8
 80007f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	000c      	movs	r4, r1
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	2201      	movs	r2, #1
 80007f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000800:	193b      	adds	r3, r7, r4
 8000802:	2203      	movs	r2, #3
 8000804:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000806:	193b      	adds	r3, r7, r4
 8000808:	4a19      	ldr	r2, [pc, #100]	; (8000870 <MX_GPIO_Init+0x1a8>)
 800080a:	0019      	movs	r1, r3
 800080c:	0010      	movs	r0, r2
 800080e:	f000 fcdf 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_Codec1_Pin NCS_Codec2_Pin NCS_Codec3_Pin NCS_Codec4_Pin */
  GPIO_InitStruct.Pin = NCS_Codec1_Pin|NCS_Codec2_Pin|NCS_Codec3_Pin|NCS_Codec4_Pin;
 8000812:	0021      	movs	r1, r4
 8000814:	187b      	adds	r3, r7, r1
 8000816:	22f0      	movs	r2, #240	; 0xf0
 8000818:	0112      	lsls	r2, r2, #4
 800081a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	000c      	movs	r4, r1
 800081e:	193b      	adds	r3, r7, r4
 8000820:	2201      	movs	r2, #1
 8000822:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	193b      	adds	r3, r7, r4
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082a:	193b      	adds	r3, r7, r4
 800082c:	2203      	movs	r2, #3
 800082e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000830:	193a      	adds	r2, r7, r4
 8000832:	2390      	movs	r3, #144	; 0x90
 8000834:	05db      	lsls	r3, r3, #23
 8000836:	0011      	movs	r1, r2
 8000838:	0018      	movs	r0, r3
 800083a:	f000 fcc9 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_Codecs_1to4_Pin EN_Codecs_5to8_Pin */
  GPIO_InitStruct.Pin = EN_Codecs_1to4_Pin|EN_Codecs_5to8_Pin;
 800083e:	0021      	movs	r1, r4
 8000840:	187b      	adds	r3, r7, r1
 8000842:	22c0      	movs	r2, #192	; 0xc0
 8000844:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2201      	movs	r2, #1
 800084a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000858:	187b      	adds	r3, r7, r1
 800085a:	4a06      	ldr	r2, [pc, #24]	; (8000874 <MX_GPIO_Init+0x1ac>)
 800085c:	0019      	movs	r1, r3
 800085e:	0010      	movs	r0, r2
 8000860:	f000 fcb6 	bl	80011d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b009      	add	sp, #36	; 0x24
 800086a:	bd90      	pop	{r4, r7, pc}
 800086c:	40021000 	.word	0x40021000
 8000870:	48000400 	.word	0x48000400
 8000874:	48001400 	.word	0x48001400
 8000878:	00000406 	.word	0x00000406

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	e7fe      	b.n	8000884 <Error_Handler+0x8>
	...

08000888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <HAL_MspInit+0x44>)
 8000890:	699a      	ldr	r2, [r3, #24]
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <HAL_MspInit+0x44>)
 8000894:	2101      	movs	r1, #1
 8000896:	430a      	orrs	r2, r1
 8000898:	619a      	str	r2, [r3, #24]
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <HAL_MspInit+0x44>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	2201      	movs	r2, #1
 80008a0:	4013      	ands	r3, r2
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <HAL_MspInit+0x44>)
 80008a8:	69da      	ldr	r2, [r3, #28]
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <HAL_MspInit+0x44>)
 80008ac:	2180      	movs	r1, #128	; 0x80
 80008ae:	0549      	lsls	r1, r1, #21
 80008b0:	430a      	orrs	r2, r1
 80008b2:	61da      	str	r2, [r3, #28]
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <HAL_MspInit+0x44>)
 80008b6:	69da      	ldr	r2, [r3, #28]
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	055b      	lsls	r3, r3, #21
 80008bc:	4013      	ands	r3, r2
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b002      	add	sp, #8
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	40021000 	.word	0x40021000

080008d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b08b      	sub	sp, #44	; 0x2c
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	2414      	movs	r4, #20
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	0018      	movs	r0, r3
 80008de:	2314      	movs	r3, #20
 80008e0:	001a      	movs	r2, r3
 80008e2:	2100      	movs	r1, #0
 80008e4:	f002 fd0c 	bl	8003300 <memset>
  if(hspi->Instance==SPI1)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a1c      	ldr	r2, [pc, #112]	; (8000960 <HAL_SPI_MspInit+0x90>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d131      	bne.n	8000956 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <HAL_SPI_MspInit+0x94>)
 80008f4:	699a      	ldr	r2, [r3, #24]
 80008f6:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <HAL_SPI_MspInit+0x94>)
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	0149      	lsls	r1, r1, #5
 80008fc:	430a      	orrs	r2, r1
 80008fe:	619a      	str	r2, [r3, #24]
 8000900:	4b18      	ldr	r3, [pc, #96]	; (8000964 <HAL_SPI_MspInit+0x94>)
 8000902:	699a      	ldr	r2, [r3, #24]
 8000904:	2380      	movs	r3, #128	; 0x80
 8000906:	015b      	lsls	r3, r3, #5
 8000908:	4013      	ands	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <HAL_SPI_MspInit+0x94>)
 8000910:	695a      	ldr	r2, [r3, #20]
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <HAL_SPI_MspInit+0x94>)
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	02c9      	lsls	r1, r1, #11
 8000918:	430a      	orrs	r2, r1
 800091a:	615a      	str	r2, [r3, #20]
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <HAL_SPI_MspInit+0x94>)
 800091e:	695a      	ldr	r2, [r3, #20]
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	02db      	lsls	r3, r3, #11
 8000924:	4013      	ands	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800092a:	0021      	movs	r1, r4
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2238      	movs	r2, #56	; 0x38
 8000930:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2202      	movs	r2, #2
 8000936:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2203      	movs	r2, #3
 8000942:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094a:	187b      	adds	r3, r7, r1
 800094c:	4a06      	ldr	r2, [pc, #24]	; (8000968 <HAL_SPI_MspInit+0x98>)
 800094e:	0019      	movs	r1, r3
 8000950:	0010      	movs	r0, r2
 8000952:	f000 fc3d 	bl	80011d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	b00b      	add	sp, #44	; 0x2c
 800095c:	bd90      	pop	{r4, r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	40013000 	.word	0x40013000
 8000964:	40021000 	.word	0x40021000
 8000968:	48000400 	.word	0x48000400

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000970:	e7fe      	b.n	8000970 <NMI_Handler+0x4>

08000972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <HardFault_Handler+0x4>

08000978 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000990:	f000 fb2a 	bl	8000fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009a4:	480d      	ldr	r0, [pc, #52]	; (80009dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009a6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009a8:	f7ff fff7 	bl	800099a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ac:	480c      	ldr	r0, [pc, #48]	; (80009e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ae:	490d      	ldr	r1, [pc, #52]	; (80009e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b0:	4a0d      	ldr	r2, [pc, #52]	; (80009e8 <LoopForever+0xe>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b4:	e002      	b.n	80009bc <LoopCopyDataInit>

080009b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ba:	3304      	adds	r3, #4

080009bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c0:	d3f9      	bcc.n	80009b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c4:	4c0a      	ldr	r4, [pc, #40]	; (80009f0 <LoopForever+0x16>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c8:	e001      	b.n	80009ce <LoopFillZerobss>

080009ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009cc:	3204      	adds	r2, #4

080009ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d0:	d3fb      	bcc.n	80009ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009d2:	f002 fc9d 	bl	8003310 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009d6:	f7ff fdc9 	bl	800056c <main>

080009da <LoopForever>:

LoopForever:
    b LoopForever
 80009da:	e7fe      	b.n	80009da <LoopForever>
  ldr   r0, =_estack
 80009dc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80009e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009e8:	080033b0 	.word	0x080033b0
  ldr r2, =_sbss
 80009ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009f0:	20000130 	.word	0x20000130

080009f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f4:	e7fe      	b.n	80009f4 <ADC1_IRQHandler>
	...

080009f8 <AK4619_ActivateSPIComunication>:
uint8_t ReplaceBits(uint8_t target, uint8_t bitNum, uint8_t bitPos, uint8_t newValue) {
	uint8_t mask = ((uint8_t)pow(2, bitNum) - 1) << bitPos;
	return (target & ~mask) | (newValue << bitPos);
}

uint8_t AK4619_ActivateSPIComunication(ak4619_Device_t *device) {
 80009f8:	b5b0      	push	{r4, r5, r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	/* Holds data for SPI transmission */
	// TODO: give this discriptive names
	uint8_t spiData[4] = {0xDE, 0xAD, 0xDA, 0x7A};
 8000a00:	2308      	movs	r3, #8
 8000a02:	18fb      	adds	r3, r7, r3
 8000a04:	4a27      	ldr	r2, [pc, #156]	; (8000aa4 <AK4619_ActivateSPIComunication+0xac>)
 8000a06:	601a      	str	r2, [r3, #0]
	/* Holds hal status for error catching. */
	uint8_t status = 0;
 8000a08:	230f      	movs	r3, #15
 8000a0a:	18fb      	adds	r3, r7, r3
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
	/* Checks for input errors. */
	if(device->mcuInterface != ak4619_SPI) {
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d001      	beq.n	8000a1c <AK4619_ActivateSPIComunication+0x24>
		return HAL_ERROR;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e03e      	b.n	8000a9a <AK4619_ActivateSPIComunication+0xa2>
	}
	/* Repeats spi call, in case of busy spi unit. */
	for(uint8_t attempt = 0; attempt <= AK4619_COM_MAX_ATTEMPTS; attempt++) {
 8000a1c:	230e      	movs	r3, #14
 8000a1e:	18fb      	adds	r3, r7, r3
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
 8000a24:	e02f      	b.n	8000a86 <AK4619_ActivateSPIComunication+0x8e>
		/* Reads current setting of register. */
		HAL_GPIO_WritePin(device->NCSPort, device->NCSPin, GPIO_PIN_RESET);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	68d8      	ldr	r0, [r3, #12]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	891b      	ldrh	r3, [r3, #8]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	0019      	movs	r1, r3
 8000a32:	f000 fd3d 	bl	80014b0 <HAL_GPIO_WritePin>
		status = HAL_SPI_Transmit(device->hspi, spiData, 4, AK4619_COM_TIMEOUT);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6858      	ldr	r0, [r3, #4]
 8000a3a:	250f      	movs	r5, #15
 8000a3c:	197c      	adds	r4, r7, r5
 8000a3e:	2308      	movs	r3, #8
 8000a40:	18f9      	adds	r1, r7, r3
 8000a42:	2364      	movs	r3, #100	; 0x64
 8000a44:	2204      	movs	r2, #4
 8000a46:	f001 ffa3 	bl	8002990 <HAL_SPI_Transmit>
 8000a4a:	0003      	movs	r3, r0
 8000a4c:	7023      	strb	r3, [r4, #0]
		HAL_GPIO_WritePin(device->NCSPort, device->NCSPin, GPIO_PIN_SET);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	68d8      	ldr	r0, [r3, #12]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	891b      	ldrh	r3, [r3, #8]
 8000a56:	2201      	movs	r2, #1
 8000a58:	0019      	movs	r1, r3
 8000a5a:	f000 fd29 	bl	80014b0 <HAL_GPIO_WritePin>
		if(status == HAL_OK) {
 8000a5e:	197b      	adds	r3, r7, r5
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d015      	beq.n	8000a92 <AK4619_ActivateSPIComunication+0x9a>
			/* Breaks out of loop when successful. */
			break;
		} else if(status == HAL_BUSY) {
 8000a66:	197b      	adds	r3, r7, r5
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	d103      	bne.n	8000a76 <AK4619_ActivateSPIComunication+0x7e>
			/* Delays next spi call if first attempt failed. */
			HAL_Delay(AK4619_SPI_ATTEMPT_DELAY);
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f000 fad6 	bl	8001020 <HAL_Delay>
 8000a74:	e001      	b.n	8000a7a <AK4619_ActivateSPIComunication+0x82>
		} else {
			/* Returns error when spi unit fails. */
			return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e00f      	b.n	8000a9a <AK4619_ActivateSPIComunication+0xa2>
	for(uint8_t attempt = 0; attempt <= AK4619_COM_MAX_ATTEMPTS; attempt++) {
 8000a7a:	210e      	movs	r1, #14
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	781a      	ldrb	r2, [r3, #0]
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	3201      	adds	r2, #1
 8000a84:	701a      	strb	r2, [r3, #0]
 8000a86:	230e      	movs	r3, #14
 8000a88:	18fb      	adds	r3, r7, r3
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b03      	cmp	r3, #3
 8000a8e:	d9ca      	bls.n	8000a26 <AK4619_ActivateSPIComunication+0x2e>
 8000a90:	e000      	b.n	8000a94 <AK4619_ActivateSPIComunication+0x9c>
			break;
 8000a92:	46c0      	nop			; (mov r8, r8)
		}
	}
	return status;
 8000a94:	230f      	movs	r3, #15
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	781b      	ldrb	r3, [r3, #0]
}
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b004      	add	sp, #16
 8000aa0:	bdb0      	pop	{r4, r5, r7, pc}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	7adaadde 	.word	0x7adaadde

08000aa8 <AK4619_WriteSPI>:

uint8_t AK4619_WriteSPI(ak4619_Device_t *device, uint8_t registerAddress, uint8_t *data) {
 8000aa8:	b5b0      	push	{r4, r5, r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	607a      	str	r2, [r7, #4]
 8000ab2:	200b      	movs	r0, #11
 8000ab4:	183b      	adds	r3, r7, r0
 8000ab6:	1c0a      	adds	r2, r1, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
	/* Holds data for SPI transmission */
	// TODO: give this discriptive names (SPI_WRITE_COMMAND)
	uint8_t spiData[4] = {0xC3, 0x00, registerAddress, *data};
 8000aba:	2110      	movs	r1, #16
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	22c3      	movs	r2, #195	; 0xc3
 8000ac0:	701a      	strb	r2, [r3, #0]
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	705a      	strb	r2, [r3, #1]
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	183a      	adds	r2, r7, r0
 8000acc:	7812      	ldrb	r2, [r2, #0]
 8000ace:	709a      	strb	r2, [r3, #2]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	781a      	ldrb	r2, [r3, #0]
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	70da      	strb	r2, [r3, #3]
	/* Holds hal status for error catching. */
	uint8_t status = 0;
 8000ad8:	2317      	movs	r3, #23
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	2200      	movs	r2, #0
 8000ade:	701a      	strb	r2, [r3, #0]
	/* Checks for input errors. */
	if(device->mcuInterface != ak4619_SPI || registerAddress > AK4619_REG_DAC_MUTE_AND_FILTER_SETTING) {
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d103      	bne.n	8000af0 <AK4619_WriteSPI+0x48>
 8000ae8:	183b      	adds	r3, r7, r0
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b14      	cmp	r3, #20
 8000aee:	d901      	bls.n	8000af4 <AK4619_WriteSPI+0x4c>
		return HAL_ERROR;
 8000af0:	2301      	movs	r3, #1
 8000af2:	e03e      	b.n	8000b72 <AK4619_WriteSPI+0xca>
	}
	/* Repeats spi call, in case of busy spi unit. */
	for(uint8_t attempt = 0; attempt <= AK4619_COM_MAX_ATTEMPTS; attempt++) {
 8000af4:	2316      	movs	r3, #22
 8000af6:	18fb      	adds	r3, r7, r3
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
 8000afc:	e02f      	b.n	8000b5e <AK4619_WriteSPI+0xb6>
		/* Reads current setting of register. */
		HAL_GPIO_WritePin(device->NCSPort, device->NCSPin, GPIO_PIN_RESET);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	68d8      	ldr	r0, [r3, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	891b      	ldrh	r3, [r3, #8]
 8000b06:	2200      	movs	r2, #0
 8000b08:	0019      	movs	r1, r3
 8000b0a:	f000 fcd1 	bl	80014b0 <HAL_GPIO_WritePin>
		status = HAL_SPI_Transmit(device->hspi, spiData, 4, AK4619_COM_TIMEOUT);
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	6858      	ldr	r0, [r3, #4]
 8000b12:	2517      	movs	r5, #23
 8000b14:	197c      	adds	r4, r7, r5
 8000b16:	2310      	movs	r3, #16
 8000b18:	18f9      	adds	r1, r7, r3
 8000b1a:	2364      	movs	r3, #100	; 0x64
 8000b1c:	2204      	movs	r2, #4
 8000b1e:	f001 ff37 	bl	8002990 <HAL_SPI_Transmit>
 8000b22:	0003      	movs	r3, r0
 8000b24:	7023      	strb	r3, [r4, #0]
		HAL_GPIO_WritePin(device->NCSPort, device->NCSPin, GPIO_PIN_SET);
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	68d8      	ldr	r0, [r3, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	891b      	ldrh	r3, [r3, #8]
 8000b2e:	2201      	movs	r2, #1
 8000b30:	0019      	movs	r1, r3
 8000b32:	f000 fcbd 	bl	80014b0 <HAL_GPIO_WritePin>
		if(status == HAL_OK) {
 8000b36:	197b      	adds	r3, r7, r5
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d015      	beq.n	8000b6a <AK4619_WriteSPI+0xc2>
			/* Breaks out of loop when successful. */
			break;
		} else if(status == HAL_BUSY) {
 8000b3e:	197b      	adds	r3, r7, r5
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d103      	bne.n	8000b4e <AK4619_WriteSPI+0xa6>
			/* Delays next spi call if first attempt failed. */
			HAL_Delay(AK4619_SPI_ATTEMPT_DELAY);
 8000b46:	2001      	movs	r0, #1
 8000b48:	f000 fa6a 	bl	8001020 <HAL_Delay>
 8000b4c:	e001      	b.n	8000b52 <AK4619_WriteSPI+0xaa>
		} else {
			/* Returns error when spi unit fails. */
			return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00f      	b.n	8000b72 <AK4619_WriteSPI+0xca>
	for(uint8_t attempt = 0; attempt <= AK4619_COM_MAX_ATTEMPTS; attempt++) {
 8000b52:	2116      	movs	r1, #22
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	781a      	ldrb	r2, [r3, #0]
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	3201      	adds	r2, #1
 8000b5c:	701a      	strb	r2, [r3, #0]
 8000b5e:	2316      	movs	r3, #22
 8000b60:	18fb      	adds	r3, r7, r3
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b03      	cmp	r3, #3
 8000b66:	d9ca      	bls.n	8000afe <AK4619_WriteSPI+0x56>
 8000b68:	e000      	b.n	8000b6c <AK4619_WriteSPI+0xc4>
			break;
 8000b6a:	46c0      	nop			; (mov r8, r8)
		}
	}
	return status;
 8000b6c:	2317      	movs	r3, #23
 8000b6e:	18fb      	adds	r3, r7, r3
 8000b70:	781b      	ldrb	r3, [r3, #0]
}
 8000b72:	0018      	movs	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b006      	add	sp, #24
 8000b78:	bdb0      	pop	{r4, r5, r7, pc}

08000b7a <AK4619_ReadSPI>:

uint8_t AK4619_ReadSPI(ak4619_Device_t *device, uint8_t registerAddress, uint8_t *data) {
 8000b7a:	b5b0      	push	{r4, r5, r7, lr}
 8000b7c:	b088      	sub	sp, #32
 8000b7e:	af02      	add	r7, sp, #8
 8000b80:	60f8      	str	r0, [r7, #12]
 8000b82:	607a      	str	r2, [r7, #4]
 8000b84:	200b      	movs	r0, #11
 8000b86:	183b      	adds	r3, r7, r0
 8000b88:	1c0a      	adds	r2, r1, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
	/* Holds data for SPI transmission */
	// TODO: give this discriptive names (SPI_READ_COMMAND)
	uint8_t spiData[4] = {0x43, 0x00, registerAddress, 0x00};
 8000b8c:	2110      	movs	r1, #16
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2243      	movs	r2, #67	; 0x43
 8000b92:	701a      	strb	r2, [r3, #0]
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2200      	movs	r2, #0
 8000b98:	705a      	strb	r2, [r3, #1]
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	183a      	adds	r2, r7, r0
 8000b9e:	7812      	ldrb	r2, [r2, #0]
 8000ba0:	709a      	strb	r2, [r3, #2]
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	70da      	strb	r2, [r3, #3]
	/* Holds hal status for error catching. */
	uint8_t status = 0;
 8000ba8:	2317      	movs	r3, #23
 8000baa:	18fb      	adds	r3, r7, r3
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
	/* Checks for input errors. */
	if(device->mcuInterface != ak4619_SPI || registerAddress > AK4619_REG_DAC_MUTE_AND_FILTER_SETTING) {
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d103      	bne.n	8000bc0 <AK4619_ReadSPI+0x46>
 8000bb8:	183b      	adds	r3, r7, r0
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b14      	cmp	r3, #20
 8000bbe:	d901      	bls.n	8000bc4 <AK4619_ReadSPI+0x4a>
		return HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e040      	b.n	8000c46 <AK4619_ReadSPI+0xcc>
	}
	/* Repeats spi call, in case of busy spi unit. */
	for(uint8_t attempt = 0; attempt <= AK4619_COM_MAX_ATTEMPTS; attempt++) {
 8000bc4:	2316      	movs	r3, #22
 8000bc6:	18fb      	adds	r3, r7, r3
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
 8000bcc:	e031      	b.n	8000c32 <AK4619_ReadSPI+0xb8>
		/* Reads current setting of register. */
		HAL_GPIO_WritePin(device->NCSPort, device->NCSPin, GPIO_PIN_RESET);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	68d8      	ldr	r0, [r3, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	891b      	ldrh	r3, [r3, #8]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	0019      	movs	r1, r3
 8000bda:	f000 fc69 	bl	80014b0 <HAL_GPIO_WritePin>
		status = HAL_SPI_TransmitReceive(device->hspi, spiData, data, 4, AK4619_COM_TIMEOUT);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	6858      	ldr	r0, [r3, #4]
 8000be2:	2517      	movs	r5, #23
 8000be4:	197c      	adds	r4, r7, r5
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	2310      	movs	r3, #16
 8000bea:	18f9      	adds	r1, r7, r3
 8000bec:	2364      	movs	r3, #100	; 0x64
 8000bee:	9300      	str	r3, [sp, #0]
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	f002 f82d 	bl	8002c50 <HAL_SPI_TransmitReceive>
 8000bf6:	0003      	movs	r3, r0
 8000bf8:	7023      	strb	r3, [r4, #0]
		HAL_GPIO_WritePin(device->NCSPort, device->NCSPin, GPIO_PIN_SET);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	68d8      	ldr	r0, [r3, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	891b      	ldrh	r3, [r3, #8]
 8000c02:	2201      	movs	r2, #1
 8000c04:	0019      	movs	r1, r3
 8000c06:	f000 fc53 	bl	80014b0 <HAL_GPIO_WritePin>
		if(status == HAL_OK) {
 8000c0a:	197b      	adds	r3, r7, r5
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d015      	beq.n	8000c3e <AK4619_ReadSPI+0xc4>
			/* Breaks out of loop when successful. */
			break;
		} else if(status == HAL_BUSY) {
 8000c12:	197b      	adds	r3, r7, r5
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d103      	bne.n	8000c22 <AK4619_ReadSPI+0xa8>
			/* Delays next spi call if first attempt failed. */
			HAL_Delay(AK4619_SPI_ATTEMPT_DELAY);
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f000 fa00 	bl	8001020 <HAL_Delay>
 8000c20:	e001      	b.n	8000c26 <AK4619_ReadSPI+0xac>
		} else {
			/* Returns error when spi unit fails. */
			return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e00f      	b.n	8000c46 <AK4619_ReadSPI+0xcc>
	for(uint8_t attempt = 0; attempt <= AK4619_COM_MAX_ATTEMPTS; attempt++) {
 8000c26:	2116      	movs	r1, #22
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	781a      	ldrb	r2, [r3, #0]
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	3201      	adds	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
 8000c32:	2316      	movs	r3, #22
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	d9c8      	bls.n	8000bce <AK4619_ReadSPI+0x54>
 8000c3c:	e000      	b.n	8000c40 <AK4619_ReadSPI+0xc6>
			break;
 8000c3e:	46c0      	nop			; (mov r8, r8)
		}
	}
	return status;
 8000c40:	2317      	movs	r3, #23
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	781b      	ldrb	r3, [r3, #0]
}
 8000c46:	0018      	movs	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b006      	add	sp, #24
 8000c4c:	bdb0      	pop	{r4, r5, r7, pc}

08000c4e <AK4619_WriteI2C>:

uint8_t AK4619_WriteI2C(ak4619_Device_t *device, uint8_t registerAddress, uint8_t *data) {
 8000c4e:	b5b0      	push	{r4, r5, r7, lr}
 8000c50:	b08a      	sub	sp, #40	; 0x28
 8000c52:	af04      	add	r7, sp, #16
 8000c54:	60f8      	str	r0, [r7, #12]
 8000c56:	607a      	str	r2, [r7, #4]
 8000c58:	200b      	movs	r0, #11
 8000c5a:	183b      	adds	r3, r7, r0
 8000c5c:	1c0a      	adds	r2, r1, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
	/* Holds i2c status for error catching. */
	uint8_t status = 0;
 8000c60:	2317      	movs	r3, #23
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
	/* Checks for input errors. */
	if(device->mcuInterface != ak4619_I2C || registerAddress > AK4619_REG_DAC_MUTE_AND_FILTER_SETTING) {
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d103      	bne.n	8000c78 <AK4619_WriteI2C+0x2a>
 8000c70:	183b      	adds	r3, r7, r0
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b14      	cmp	r3, #20
 8000c76:	d901      	bls.n	8000c7c <AK4619_WriteI2C+0x2e>
		return HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e03c      	b.n	8000cf6 <AK4619_WriteI2C+0xa8>
	}
	/* Repeats i2c call, in case of busy i2c unit. */
	for(uint8_t attempt = 0; attempt <= AK4619_COM_MAX_ATTEMPTS; attempt++) {
 8000c7c:	2316      	movs	r3, #22
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
 8000c84:	e02d      	b.n	8000ce2 <AK4619_WriteI2C+0x94>
		status = HAL_I2C_Mem_Write(
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	6858      	ldr	r0, [r3, #4]
				device->hi2c, (AK4619_I2C_DEVICE_ADDRESS + device->a0) << 1,
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	7a1b      	ldrb	r3, [r3, #8]
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	3310      	adds	r3, #16
 8000c92:	b29b      	uxth	r3, r3
		status = HAL_I2C_Mem_Write(
 8000c94:	18db      	adds	r3, r3, r3
 8000c96:	b299      	uxth	r1, r3
 8000c98:	230b      	movs	r3, #11
 8000c9a:	18fb      	adds	r3, r7, r3
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	2517      	movs	r5, #23
 8000ca2:	197c      	adds	r4, r7, r5
 8000ca4:	2364      	movs	r3, #100	; 0x64
 8000ca6:	9302      	str	r3, [sp, #8]
 8000ca8:	2301      	movs	r3, #1
 8000caa:	9301      	str	r3, [sp, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	f000 fc1b 	bl	80014ec <HAL_I2C_Mem_Write>
 8000cb6:	0003      	movs	r3, r0
 8000cb8:	7023      	strb	r3, [r4, #0]
				registerAddress, I2C_MEMADD_SIZE_8BIT, data, 1,
				AK4619_COM_TIMEOUT
		);
		if(status == HAL_OK) { // Breaks out of loop when successful.
 8000cba:	197b      	adds	r3, r7, r5
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d015      	beq.n	8000cee <AK4619_WriteI2C+0xa0>
			break;
		} else if(status == HAL_BUSY) {
 8000cc2:	197b      	adds	r3, r7, r5
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d103      	bne.n	8000cd2 <AK4619_WriteI2C+0x84>
			/* Delays next i2c call if first attempt failed. */
			HAL_Delay(AK4619_I2C_ATTEMPT_DELAY);
 8000cca:	200a      	movs	r0, #10
 8000ccc:	f000 f9a8 	bl	8001020 <HAL_Delay>
 8000cd0:	e001      	b.n	8000cd6 <AK4619_WriteI2C+0x88>
		} else {
			/* Returns error when i2c unit fails. */
			return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e00f      	b.n	8000cf6 <AK4619_WriteI2C+0xa8>
	for(uint8_t attempt = 0; attempt <= AK4619_COM_MAX_ATTEMPTS; attempt++) {
 8000cd6:	2116      	movs	r1, #22
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	781a      	ldrb	r2, [r3, #0]
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	3201      	adds	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]
 8000ce2:	2316      	movs	r3, #22
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b03      	cmp	r3, #3
 8000cea:	d9cc      	bls.n	8000c86 <AK4619_WriteI2C+0x38>
 8000cec:	e000      	b.n	8000cf0 <AK4619_WriteI2C+0xa2>
			break;
 8000cee:	46c0      	nop			; (mov r8, r8)
		}
	}
	return status;
 8000cf0:	2317      	movs	r3, #23
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	781b      	ldrb	r3, [r3, #0]
}
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b006      	add	sp, #24
 8000cfc:	bdb0      	pop	{r4, r5, r7, pc}

08000cfe <AK4619_ReadI2C>:

uint8_t AK4619_ReadI2C(ak4619_Device_t *device, uint8_t registerAddress, uint8_t *data) {
 8000cfe:	b5b0      	push	{r4, r5, r7, lr}
 8000d00:	b08a      	sub	sp, #40	; 0x28
 8000d02:	af04      	add	r7, sp, #16
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	607a      	str	r2, [r7, #4]
 8000d08:	200b      	movs	r0, #11
 8000d0a:	183b      	adds	r3, r7, r0
 8000d0c:	1c0a      	adds	r2, r1, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
	/* Holds i2c status for error catching. */
	uint8_t status = 0;
 8000d10:	2317      	movs	r3, #23
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
	/* Checks for input errors. */
	if(device->mcuInterface != ak4619_I2C || registerAddress > AK4619_REG_DAC_MUTE_AND_FILTER_SETTING) {
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d103      	bne.n	8000d28 <AK4619_ReadI2C+0x2a>
 8000d20:	183b      	adds	r3, r7, r0
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b14      	cmp	r3, #20
 8000d26:	d901      	bls.n	8000d2c <AK4619_ReadI2C+0x2e>
		return HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e03c      	b.n	8000da6 <AK4619_ReadI2C+0xa8>
	}
	/* Repeats i2c call, in case of busy i2c unit. */
	for(uint8_t attempt = 0; attempt <= AK4619_COM_MAX_ATTEMPTS; attempt++) {
 8000d2c:	2316      	movs	r3, #22
 8000d2e:	18fb      	adds	r3, r7, r3
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
 8000d34:	e02d      	b.n	8000d92 <AK4619_ReadI2C+0x94>
		status = HAL_I2C_Mem_Read(device->hi2c, (AK4619_I2C_DEVICE_ADDRESS + device->a0) << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, data, 1, AK4619_COM_TIMEOUT);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	6858      	ldr	r0, [r3, #4]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	7a1b      	ldrb	r3, [r3, #8]
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	3310      	adds	r3, #16
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	18db      	adds	r3, r3, r3
 8000d46:	b299      	uxth	r1, r3
 8000d48:	230b      	movs	r3, #11
 8000d4a:	18fb      	adds	r3, r7, r3
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	2517      	movs	r5, #23
 8000d52:	197c      	adds	r4, r7, r5
 8000d54:	2364      	movs	r3, #100	; 0x64
 8000d56:	9302      	str	r3, [sp, #8]
 8000d58:	2301      	movs	r3, #1
 8000d5a:	9301      	str	r3, [sp, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	2301      	movs	r3, #1
 8000d62:	f000 fcf1 	bl	8001748 <HAL_I2C_Mem_Read>
 8000d66:	0003      	movs	r3, r0
 8000d68:	7023      	strb	r3, [r4, #0]
		if(status == HAL_OK) { // Breaks out of loop when successful.
 8000d6a:	197b      	adds	r3, r7, r5
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d015      	beq.n	8000d9e <AK4619_ReadI2C+0xa0>
			break;
		} else if(status == HAL_BUSY) {
 8000d72:	197b      	adds	r3, r7, r5
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d103      	bne.n	8000d82 <AK4619_ReadI2C+0x84>
			/* Delays next i2c call if first attempt failed. */
			HAL_Delay(AK4619_I2C_ATTEMPT_DELAY);
 8000d7a:	200a      	movs	r0, #10
 8000d7c:	f000 f950 	bl	8001020 <HAL_Delay>
 8000d80:	e001      	b.n	8000d86 <AK4619_ReadI2C+0x88>
		} else {
			/* Returns error when i2c unit fails. */
			return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00f      	b.n	8000da6 <AK4619_ReadI2C+0xa8>
	for(uint8_t attempt = 0; attempt <= AK4619_COM_MAX_ATTEMPTS; attempt++) {
 8000d86:	2116      	movs	r1, #22
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	781a      	ldrb	r2, [r3, #0]
 8000d8c:	187b      	adds	r3, r7, r1
 8000d8e:	3201      	adds	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
 8000d92:	2316      	movs	r3, #22
 8000d94:	18fb      	adds	r3, r7, r3
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d9cc      	bls.n	8000d36 <AK4619_ReadI2C+0x38>
 8000d9c:	e000      	b.n	8000da0 <AK4619_ReadI2C+0xa2>
			break;
 8000d9e:	46c0      	nop			; (mov r8, r8)
		}
	}
	return status;
 8000da0:	2317      	movs	r3, #23
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	781b      	ldrb	r3, [r3, #0]
}
 8000da6:	0018      	movs	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b006      	add	sp, #24
 8000dac:	bdb0      	pop	{r4, r5, r7, pc}

08000dae <AK4619_Write>:

uint8_t AK4619_Write(ak4619_Device_t *device, uint8_t registerAddress, uint8_t *data) {
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b084      	sub	sp, #16
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	60f8      	str	r0, [r7, #12]
 8000db6:	607a      	str	r2, [r7, #4]
 8000db8:	200b      	movs	r0, #11
 8000dba:	183b      	adds	r3, r7, r0
 8000dbc:	1c0a      	adds	r2, r1, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
	if (device->mcuInterface == ak4619_SPI) {
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d108      	bne.n	8000dda <AK4619_Write+0x2c>
		return AK4619_WriteSPI(device, registerAddress, data);
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	183b      	adds	r3, r7, r0
 8000dcc:	7819      	ldrb	r1, [r3, #0]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f7ff fe69 	bl	8000aa8 <AK4619_WriteSPI>
 8000dd6:	0003      	movs	r3, r0
 8000dd8:	e00e      	b.n	8000df8 <AK4619_Write+0x4a>
	} else if (device->mcuInterface == ak4619_I2C) {
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d109      	bne.n	8000df6 <AK4619_Write+0x48>
		return AK4619_WriteI2C(device, registerAddress, data);
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	230b      	movs	r3, #11
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	7819      	ldrb	r1, [r3, #0]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	0018      	movs	r0, r3
 8000dee:	f7ff ff2e 	bl	8000c4e <AK4619_WriteI2C>
 8000df2:	0003      	movs	r3, r0
 8000df4:	e000      	b.n	8000df8 <AK4619_Write+0x4a>
	} else {
		return EXIT_FAILURE;
 8000df6:	2301      	movs	r3, #1
	}
}
 8000df8:	0018      	movs	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b004      	add	sp, #16
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <AK4619_Read>:

uint8_t AK4619_Read(ak4619_Device_t *device, uint8_t registerAddress, uint8_t *data) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	607a      	str	r2, [r7, #4]
 8000e0a:	200b      	movs	r0, #11
 8000e0c:	183b      	adds	r3, r7, r0
 8000e0e:	1c0a      	adds	r2, r1, #0
 8000e10:	701a      	strb	r2, [r3, #0]
	if (device->mcuInterface == ak4619_SPI) {
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d108      	bne.n	8000e2c <AK4619_Read+0x2c>
		return AK4619_ReadSPI(device, registerAddress, data);
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	183b      	adds	r3, r7, r0
 8000e1e:	7819      	ldrb	r1, [r3, #0]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	0018      	movs	r0, r3
 8000e24:	f7ff fea9 	bl	8000b7a <AK4619_ReadSPI>
 8000e28:	0003      	movs	r3, r0
 8000e2a:	e00e      	b.n	8000e4a <AK4619_Read+0x4a>
	} else if (device->mcuInterface == ak4619_I2C) {
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d109      	bne.n	8000e48 <AK4619_Read+0x48>
		return AK4619_ReadI2C(device, registerAddress, data);
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	230b      	movs	r3, #11
 8000e38:	18fb      	adds	r3, r7, r3
 8000e3a:	7819      	ldrb	r1, [r3, #0]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f7ff ff5d 	bl	8000cfe <AK4619_ReadI2C>
 8000e44:	0003      	movs	r3, r0
 8000e46:	e000      	b.n	8000e4a <AK4619_Read+0x4a>
	} else {
		return EXIT_FAILURE;
 8000e48:	2301      	movs	r3, #1
	}
}
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b004      	add	sp, #16
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <AK4619_Init>:

uint8_t AK4619_Init(ak4619_Device_t *device) {
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
	if(device->mcuInterface == ak4619_SPI) {
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d105      	bne.n	8000e6e <AK4619_Init+0x1c>
		return AK4619_ActivateSPIComunication(device); //TODO: Error catching for pin, com handler and port
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	0018      	movs	r0, r3
 8000e66:	f7ff fdc7 	bl	80009f8 <AK4619_ActivateSPIComunication>
 8000e6a:	0003      	movs	r3, r0
 8000e6c:	e006      	b.n	8000e7c <AK4619_Init+0x2a>
	} 
	if(device->mcuInterface != ak4619_I2C) {
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d001      	beq.n	8000e7a <AK4619_Init+0x28>
		return EXIT_FAILURE;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e000      	b.n	8000e7c <AK4619_Init+0x2a>
	}
	return EXIT_SUCCESS;
 8000e7a:	2300      	movs	r3, #0
}
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b002      	add	sp, #8
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <AK4619_SetRegister_PowerManagementReg>:

uint8_t AK4619_SetRegister_PowerManagementReg(ak4619_Device_t *device, uint8_t *registerValue) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
	return AK4619_Write(device, AK4619_REG_POWER_MANAGEMENT, registerValue);
 8000e8e:	683a      	ldr	r2, [r7, #0]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2100      	movs	r1, #0
 8000e94:	0018      	movs	r0, r3
 8000e96:	f7ff ff8a 	bl	8000dae <AK4619_Write>
 8000e9a:	0003      	movs	r3, r0
}
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	b002      	add	sp, #8
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <AK4619_SetRegister_AudioInterfaceFormatReg>:

uint8_t AK4619_GetRegister_PowerManagementReg(ak4619_Device_t *device, uint8_t *registerValue) {
	return AK4619_Read(device, AK4619_REG_POWER_MANAGEMENT, registerValue);
}

uint8_t AK4619_SetRegister_AudioInterfaceFormatReg(ak4619_Device_t *device, uint8_t registerValue[2]) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
	if (!AK4619_Write(device, AK4619_REG_AUDIO_INTERFACE_FORMAT_A, registerValue)) {
 8000eae:	683a      	ldr	r2, [r7, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f7ff ff7a 	bl	8000dae <AK4619_Write>
 8000eba:	1e03      	subs	r3, r0, #0
 8000ebc:	d10a      	bne.n	8000ed4 <AK4619_SetRegister_AudioInterfaceFormatReg+0x30>
		return AK4619_Write(device, AK4619_REG_AUDIO_INTERFACE_FORMAT_B, ++registerValue);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	683a      	ldr	r2, [r7, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2102      	movs	r1, #2
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f7ff ff6f 	bl	8000dae <AK4619_Write>
 8000ed0:	0003      	movs	r3, r0
 8000ed2:	e000      	b.n	8000ed6 <AK4619_SetRegister_AudioInterfaceFormatReg+0x32>
	}
	return EXIT_FAILURE;
 8000ed4:	2301      	movs	r3, #1
}
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b002      	add	sp, #8
 8000edc:	bd80      	pop	{r7, pc}

08000ede <AK4619_GetRegister_AudioInterfaceFormatReg>:

uint8_t AK4619_GetRegister_AudioInterfaceFormatReg(ak4619_Device_t *device, uint8_t registerValue[2]) {
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	6039      	str	r1, [r7, #0]
	if (!AK4619_Read(device, AK4619_REG_AUDIO_INTERFACE_FORMAT_A, registerValue)) {
 8000ee8:	683a      	ldr	r2, [r7, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2101      	movs	r1, #1
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f7ff ff86 	bl	8000e00 <AK4619_Read>
 8000ef4:	1e03      	subs	r3, r0, #0
 8000ef6:	d10a      	bne.n	8000f0e <AK4619_GetRegister_AudioInterfaceFormatReg+0x30>
		return AK4619_Read(device, AK4619_REG_AUDIO_INTERFACE_FORMAT_B, ++registerValue);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	3301      	adds	r3, #1
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	683a      	ldr	r2, [r7, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2102      	movs	r1, #2
 8000f04:	0018      	movs	r0, r3
 8000f06:	f7ff ff7b 	bl	8000e00 <AK4619_Read>
 8000f0a:	0003      	movs	r3, r0
 8000f0c:	e000      	b.n	8000f10 <AK4619_GetRegister_AudioInterfaceFormatReg+0x32>
	}
	return EXIT_FAILURE;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	0018      	movs	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	b002      	add	sp, #8
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <AK4619_SetRegister_ADCAnalogInputReg>:

uint8_t AK4619_GetRegister_ADCDigitalFilterReg(ak4619_Device_t *device, uint8_t *registerValue) {
	return AK4619_Read(device, AK4619_REG_ADC_DIGITAL_FILTER_SETTING, registerValue);
}

uint8_t AK4619_SetRegister_ADCAnalogInputReg(ak4619_Device_t *device, uint8_t *registerValue) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
	return AK4619_Write(device, AK4619_REG_ADC_ANALOG_INPUT_SETTING, registerValue);
 8000f22:	683a      	ldr	r2, [r7, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	210b      	movs	r1, #11
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f7ff ff40 	bl	8000dae <AK4619_Write>
 8000f2e:	0003      	movs	r3, r0
}
 8000f30:	0018      	movs	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b002      	add	sp, #8
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <AK4619_SetRegister_DACMuteAndFilterSettingsReg>:

uint8_t AK4619_GetRegister_DACDeemphasisReg(ak4619_Device_t *device, uint8_t *registerValue) {
	return AK4619_Read(device, AK4619_REG_DAC_DEEMPHASIS_SETTING, registerValue);
}

uint8_t AK4619_SetRegister_DACMuteAndFilterSettingsReg(ak4619_Device_t *device, uint8_t *registerValue) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
	return AK4619_Write(device, AK4619_REG_DAC_MUTE_AND_FILTER_SETTING, registerValue);
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2114      	movs	r1, #20
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f7ff ff30 	bl	8000dae <AK4619_Write>
 8000f4e:	0003      	movs	r3, r0
}
 8000f50:	0018      	movs	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b002      	add	sp, #8
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f5c:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <HAL_Init+0x24>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_Init+0x24>)
 8000f62:	2110      	movs	r1, #16
 8000f64:	430a      	orrs	r2, r1
 8000f66:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000f68:	2003      	movs	r0, #3
 8000f6a:	f000 f809 	bl	8000f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f6e:	f7ff fc8b 	bl	8000888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	0018      	movs	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	40022000 	.word	0x40022000

08000f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <HAL_InitTick+0x5c>)
 8000f8a:	681c      	ldr	r4, [r3, #0]
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <HAL_InitTick+0x60>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	0019      	movs	r1, r3
 8000f92:	23fa      	movs	r3, #250	; 0xfa
 8000f94:	0098      	lsls	r0, r3, #2
 8000f96:	f7ff f8b7 	bl	8000108 <__udivsi3>
 8000f9a:	0003      	movs	r3, r0
 8000f9c:	0019      	movs	r1, r3
 8000f9e:	0020      	movs	r0, r4
 8000fa0:	f7ff f8b2 	bl	8000108 <__udivsi3>
 8000fa4:	0003      	movs	r3, r0
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f000 f905 	bl	80011b6 <HAL_SYSTICK_Config>
 8000fac:	1e03      	subs	r3, r0, #0
 8000fae:	d001      	beq.n	8000fb4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e00f      	b.n	8000fd4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b03      	cmp	r3, #3
 8000fb8:	d80b      	bhi.n	8000fd2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	425b      	negs	r3, r3
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f000 f8e2 	bl	800118c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_InitTick+0x64>)
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e000      	b.n	8000fd4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
}
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b003      	add	sp, #12
 8000fda:	bd90      	pop	{r4, r7, pc}
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	20000004 	.word	0x20000004

08000fe8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <HAL_IncTick+0x1c>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	001a      	movs	r2, r3
 8000ff2:	4b05      	ldr	r3, [pc, #20]	; (8001008 <HAL_IncTick+0x20>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	18d2      	adds	r2, r2, r3
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <HAL_IncTick+0x20>)
 8000ffa:	601a      	str	r2, [r3, #0]
}
 8000ffc:	46c0      	nop			; (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	20000008 	.word	0x20000008
 8001008:	2000012c 	.word	0x2000012c

0800100c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  return uwTick;
 8001010:	4b02      	ldr	r3, [pc, #8]	; (800101c <HAL_GetTick+0x10>)
 8001012:	681b      	ldr	r3, [r3, #0]
}
 8001014:	0018      	movs	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	2000012c 	.word	0x2000012c

08001020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001028:	f7ff fff0 	bl	800100c <HAL_GetTick>
 800102c:	0003      	movs	r3, r0
 800102e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3301      	adds	r3, #1
 8001038:	d005      	beq.n	8001046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_Delay+0x44>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	001a      	movs	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	189b      	adds	r3, r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	f7ff ffe0 	bl	800100c <HAL_GetTick>
 800104c:	0002      	movs	r2, r0
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	429a      	cmp	r2, r3
 8001056:	d8f7      	bhi.n	8001048 <HAL_Delay+0x28>
  {
  }
}
 8001058:	46c0      	nop			; (mov r8, r8)
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	46bd      	mov	sp, r7
 800105e:	b004      	add	sp, #16
 8001060:	bd80      	pop	{r7, pc}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	20000008 	.word	0x20000008

08001068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	0002      	movs	r2, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	1dfb      	adds	r3, r7, #7
 8001074:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001076:	1dfb      	adds	r3, r7, #7
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b7f      	cmp	r3, #127	; 0x7f
 800107c:	d828      	bhi.n	80010d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800107e:	4a2f      	ldr	r2, [pc, #188]	; (800113c <__NVIC_SetPriority+0xd4>)
 8001080:	1dfb      	adds	r3, r7, #7
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b25b      	sxtb	r3, r3
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	33c0      	adds	r3, #192	; 0xc0
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	589b      	ldr	r3, [r3, r2]
 800108e:	1dfa      	adds	r2, r7, #7
 8001090:	7812      	ldrb	r2, [r2, #0]
 8001092:	0011      	movs	r1, r2
 8001094:	2203      	movs	r2, #3
 8001096:	400a      	ands	r2, r1
 8001098:	00d2      	lsls	r2, r2, #3
 800109a:	21ff      	movs	r1, #255	; 0xff
 800109c:	4091      	lsls	r1, r2
 800109e:	000a      	movs	r2, r1
 80010a0:	43d2      	mvns	r2, r2
 80010a2:	401a      	ands	r2, r3
 80010a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	019b      	lsls	r3, r3, #6
 80010aa:	22ff      	movs	r2, #255	; 0xff
 80010ac:	401a      	ands	r2, r3
 80010ae:	1dfb      	adds	r3, r7, #7
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	0018      	movs	r0, r3
 80010b4:	2303      	movs	r3, #3
 80010b6:	4003      	ands	r3, r0
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010bc:	481f      	ldr	r0, [pc, #124]	; (800113c <__NVIC_SetPriority+0xd4>)
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	b25b      	sxtb	r3, r3
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	430a      	orrs	r2, r1
 80010c8:	33c0      	adds	r3, #192	; 0xc0
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010ce:	e031      	b.n	8001134 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d0:	4a1b      	ldr	r2, [pc, #108]	; (8001140 <__NVIC_SetPriority+0xd8>)
 80010d2:	1dfb      	adds	r3, r7, #7
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	0019      	movs	r1, r3
 80010d8:	230f      	movs	r3, #15
 80010da:	400b      	ands	r3, r1
 80010dc:	3b08      	subs	r3, #8
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	3306      	adds	r3, #6
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	18d3      	adds	r3, r2, r3
 80010e6:	3304      	adds	r3, #4
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	1dfa      	adds	r2, r7, #7
 80010ec:	7812      	ldrb	r2, [r2, #0]
 80010ee:	0011      	movs	r1, r2
 80010f0:	2203      	movs	r2, #3
 80010f2:	400a      	ands	r2, r1
 80010f4:	00d2      	lsls	r2, r2, #3
 80010f6:	21ff      	movs	r1, #255	; 0xff
 80010f8:	4091      	lsls	r1, r2
 80010fa:	000a      	movs	r2, r1
 80010fc:	43d2      	mvns	r2, r2
 80010fe:	401a      	ands	r2, r3
 8001100:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	019b      	lsls	r3, r3, #6
 8001106:	22ff      	movs	r2, #255	; 0xff
 8001108:	401a      	ands	r2, r3
 800110a:	1dfb      	adds	r3, r7, #7
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	0018      	movs	r0, r3
 8001110:	2303      	movs	r3, #3
 8001112:	4003      	ands	r3, r0
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001118:	4809      	ldr	r0, [pc, #36]	; (8001140 <__NVIC_SetPriority+0xd8>)
 800111a:	1dfb      	adds	r3, r7, #7
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	001c      	movs	r4, r3
 8001120:	230f      	movs	r3, #15
 8001122:	4023      	ands	r3, r4
 8001124:	3b08      	subs	r3, #8
 8001126:	089b      	lsrs	r3, r3, #2
 8001128:	430a      	orrs	r2, r1
 800112a:	3306      	adds	r3, #6
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	18c3      	adds	r3, r0, r3
 8001130:	3304      	adds	r3, #4
 8001132:	601a      	str	r2, [r3, #0]
}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	b003      	add	sp, #12
 800113a:	bd90      	pop	{r4, r7, pc}
 800113c:	e000e100 	.word	0xe000e100
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	1e5a      	subs	r2, r3, #1
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	045b      	lsls	r3, r3, #17
 8001154:	429a      	cmp	r2, r3
 8001156:	d301      	bcc.n	800115c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001158:	2301      	movs	r3, #1
 800115a:	e010      	b.n	800117e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <SysTick_Config+0x44>)
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	3a01      	subs	r2, #1
 8001162:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001164:	2301      	movs	r3, #1
 8001166:	425b      	negs	r3, r3
 8001168:	2103      	movs	r1, #3
 800116a:	0018      	movs	r0, r3
 800116c:	f7ff ff7c 	bl	8001068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <SysTick_Config+0x44>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <SysTick_Config+0x44>)
 8001178:	2207      	movs	r2, #7
 800117a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800117c:	2300      	movs	r3, #0
}
 800117e:	0018      	movs	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	b002      	add	sp, #8
 8001184:	bd80      	pop	{r7, pc}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	e000e010 	.word	0xe000e010

0800118c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	210f      	movs	r1, #15
 8001198:	187b      	adds	r3, r7, r1
 800119a:	1c02      	adds	r2, r0, #0
 800119c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b25b      	sxtb	r3, r3
 80011a6:	0011      	movs	r1, r2
 80011a8:	0018      	movs	r0, r3
 80011aa:	f7ff ff5d 	bl	8001068 <__NVIC_SetPriority>
}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b004      	add	sp, #16
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	0018      	movs	r0, r3
 80011c2:	f7ff ffbf 	bl	8001144 <SysTick_Config>
 80011c6:	0003      	movs	r3, r0
}
 80011c8:	0018      	movs	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b002      	add	sp, #8
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011de:	e14f      	b.n	8001480 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2101      	movs	r1, #1
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	4091      	lsls	r1, r2
 80011ea:	000a      	movs	r2, r1
 80011ec:	4013      	ands	r3, r2
 80011ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d100      	bne.n	80011f8 <HAL_GPIO_Init+0x28>
 80011f6:	e140      	b.n	800147a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2203      	movs	r2, #3
 80011fe:	4013      	ands	r3, r2
 8001200:	2b01      	cmp	r3, #1
 8001202:	d005      	beq.n	8001210 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2203      	movs	r2, #3
 800120a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800120c:	2b02      	cmp	r3, #2
 800120e:	d130      	bne.n	8001272 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2203      	movs	r2, #3
 800121c:	409a      	lsls	r2, r3
 800121e:	0013      	movs	r3, r2
 8001220:	43da      	mvns	r2, r3
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	68da      	ldr	r2, [r3, #12]
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	409a      	lsls	r2, r3
 8001232:	0013      	movs	r3, r2
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001246:	2201      	movs	r2, #1
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	409a      	lsls	r2, r3
 800124c:	0013      	movs	r3, r2
 800124e:	43da      	mvns	r2, r3
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	091b      	lsrs	r3, r3, #4
 800125c:	2201      	movs	r2, #1
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2203      	movs	r2, #3
 8001278:	4013      	ands	r3, r2
 800127a:	2b03      	cmp	r3, #3
 800127c:	d017      	beq.n	80012ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	2203      	movs	r2, #3
 800128a:	409a      	lsls	r2, r3
 800128c:	0013      	movs	r3, r2
 800128e:	43da      	mvns	r2, r3
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	409a      	lsls	r2, r3
 80012a0:	0013      	movs	r3, r2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2203      	movs	r2, #3
 80012b4:	4013      	ands	r3, r2
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d123      	bne.n	8001302 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	08da      	lsrs	r2, r3, #3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3208      	adds	r2, #8
 80012c2:	0092      	lsls	r2, r2, #2
 80012c4:	58d3      	ldr	r3, [r2, r3]
 80012c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	2207      	movs	r2, #7
 80012cc:	4013      	ands	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	220f      	movs	r2, #15
 80012d2:	409a      	lsls	r2, r3
 80012d4:	0013      	movs	r3, r2
 80012d6:	43da      	mvns	r2, r3
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	691a      	ldr	r2, [r3, #16]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	2107      	movs	r1, #7
 80012e6:	400b      	ands	r3, r1
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	409a      	lsls	r2, r3
 80012ec:	0013      	movs	r3, r2
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	08da      	lsrs	r2, r3, #3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3208      	adds	r2, #8
 80012fc:	0092      	lsls	r2, r2, #2
 80012fe:	6939      	ldr	r1, [r7, #16]
 8001300:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	2203      	movs	r2, #3
 800130e:	409a      	lsls	r2, r3
 8001310:	0013      	movs	r3, r2
 8001312:	43da      	mvns	r2, r3
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2203      	movs	r2, #3
 8001320:	401a      	ands	r2, r3
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	409a      	lsls	r2, r3
 8001328:	0013      	movs	r3, r2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685a      	ldr	r2, [r3, #4]
 800133a:	23c0      	movs	r3, #192	; 0xc0
 800133c:	029b      	lsls	r3, r3, #10
 800133e:	4013      	ands	r3, r2
 8001340:	d100      	bne.n	8001344 <HAL_GPIO_Init+0x174>
 8001342:	e09a      	b.n	800147a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001344:	4b54      	ldr	r3, [pc, #336]	; (8001498 <HAL_GPIO_Init+0x2c8>)
 8001346:	699a      	ldr	r2, [r3, #24]
 8001348:	4b53      	ldr	r3, [pc, #332]	; (8001498 <HAL_GPIO_Init+0x2c8>)
 800134a:	2101      	movs	r1, #1
 800134c:	430a      	orrs	r2, r1
 800134e:	619a      	str	r2, [r3, #24]
 8001350:	4b51      	ldr	r3, [pc, #324]	; (8001498 <HAL_GPIO_Init+0x2c8>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	2201      	movs	r2, #1
 8001356:	4013      	ands	r3, r2
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800135c:	4a4f      	ldr	r2, [pc, #316]	; (800149c <HAL_GPIO_Init+0x2cc>)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	089b      	lsrs	r3, r3, #2
 8001362:	3302      	adds	r3, #2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	589b      	ldr	r3, [r3, r2]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	2203      	movs	r2, #3
 800136e:	4013      	ands	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	220f      	movs	r2, #15
 8001374:	409a      	lsls	r2, r3
 8001376:	0013      	movs	r3, r2
 8001378:	43da      	mvns	r2, r3
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	2390      	movs	r3, #144	; 0x90
 8001384:	05db      	lsls	r3, r3, #23
 8001386:	429a      	cmp	r2, r3
 8001388:	d013      	beq.n	80013b2 <HAL_GPIO_Init+0x1e2>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a44      	ldr	r2, [pc, #272]	; (80014a0 <HAL_GPIO_Init+0x2d0>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d00d      	beq.n	80013ae <HAL_GPIO_Init+0x1de>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a43      	ldr	r2, [pc, #268]	; (80014a4 <HAL_GPIO_Init+0x2d4>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d007      	beq.n	80013aa <HAL_GPIO_Init+0x1da>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a42      	ldr	r2, [pc, #264]	; (80014a8 <HAL_GPIO_Init+0x2d8>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d101      	bne.n	80013a6 <HAL_GPIO_Init+0x1d6>
 80013a2:	2303      	movs	r3, #3
 80013a4:	e006      	b.n	80013b4 <HAL_GPIO_Init+0x1e4>
 80013a6:	2305      	movs	r3, #5
 80013a8:	e004      	b.n	80013b4 <HAL_GPIO_Init+0x1e4>
 80013aa:	2302      	movs	r3, #2
 80013ac:	e002      	b.n	80013b4 <HAL_GPIO_Init+0x1e4>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <HAL_GPIO_Init+0x1e4>
 80013b2:	2300      	movs	r3, #0
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	2103      	movs	r1, #3
 80013b8:	400a      	ands	r2, r1
 80013ba:	0092      	lsls	r2, r2, #2
 80013bc:	4093      	lsls	r3, r2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013c4:	4935      	ldr	r1, [pc, #212]	; (800149c <HAL_GPIO_Init+0x2cc>)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	3302      	adds	r3, #2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013d2:	4b36      	ldr	r3, [pc, #216]	; (80014ac <HAL_GPIO_Init+0x2dc>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	43da      	mvns	r2, r3
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	2380      	movs	r3, #128	; 0x80
 80013e8:	035b      	lsls	r3, r3, #13
 80013ea:	4013      	ands	r3, r2
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013f6:	4b2d      	ldr	r3, [pc, #180]	; (80014ac <HAL_GPIO_Init+0x2dc>)
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80013fc:	4b2b      	ldr	r3, [pc, #172]	; (80014ac <HAL_GPIO_Init+0x2dc>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	43da      	mvns	r2, r3
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	039b      	lsls	r3, r3, #14
 8001414:	4013      	ands	r3, r2
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4313      	orrs	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001420:	4b22      	ldr	r3, [pc, #136]	; (80014ac <HAL_GPIO_Init+0x2dc>)
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001426:	4b21      	ldr	r3, [pc, #132]	; (80014ac <HAL_GPIO_Init+0x2dc>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	43da      	mvns	r2, r3
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	4013      	ands	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	029b      	lsls	r3, r3, #10
 800143e:	4013      	ands	r3, r2
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4313      	orrs	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800144a:	4b18      	ldr	r3, [pc, #96]	; (80014ac <HAL_GPIO_Init+0x2dc>)
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <HAL_GPIO_Init+0x2dc>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	43da      	mvns	r2, r3
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	025b      	lsls	r3, r3, #9
 8001468:	4013      	ands	r3, r2
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001474:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <HAL_GPIO_Init+0x2dc>)
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	3301      	adds	r3, #1
 800147e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	40da      	lsrs	r2, r3
 8001488:	1e13      	subs	r3, r2, #0
 800148a:	d000      	beq.n	800148e <HAL_GPIO_Init+0x2be>
 800148c:	e6a8      	b.n	80011e0 <HAL_GPIO_Init+0x10>
  } 
}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	46c0      	nop			; (mov r8, r8)
 8001492:	46bd      	mov	sp, r7
 8001494:	b006      	add	sp, #24
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40021000 	.word	0x40021000
 800149c:	40010000 	.word	0x40010000
 80014a0:	48000400 	.word	0x48000400
 80014a4:	48000800 	.word	0x48000800
 80014a8:	48000c00 	.word	0x48000c00
 80014ac:	40010400 	.word	0x40010400

080014b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	0008      	movs	r0, r1
 80014ba:	0011      	movs	r1, r2
 80014bc:	1cbb      	adds	r3, r7, #2
 80014be:	1c02      	adds	r2, r0, #0
 80014c0:	801a      	strh	r2, [r3, #0]
 80014c2:	1c7b      	adds	r3, r7, #1
 80014c4:	1c0a      	adds	r2, r1, #0
 80014c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014c8:	1c7b      	adds	r3, r7, #1
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d004      	beq.n	80014da <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014d0:	1cbb      	adds	r3, r7, #2
 80014d2:	881a      	ldrh	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014d8:	e003      	b.n	80014e2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014da:	1cbb      	adds	r3, r7, #2
 80014dc:	881a      	ldrh	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	46bd      	mov	sp, r7
 80014e6:	b002      	add	sp, #8
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af02      	add	r7, sp, #8
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	000c      	movs	r4, r1
 80014f6:	0010      	movs	r0, r2
 80014f8:	0019      	movs	r1, r3
 80014fa:	230a      	movs	r3, #10
 80014fc:	18fb      	adds	r3, r7, r3
 80014fe:	1c22      	adds	r2, r4, #0
 8001500:	801a      	strh	r2, [r3, #0]
 8001502:	2308      	movs	r3, #8
 8001504:	18fb      	adds	r3, r7, r3
 8001506:	1c02      	adds	r2, r0, #0
 8001508:	801a      	strh	r2, [r3, #0]
 800150a:	1dbb      	adds	r3, r7, #6
 800150c:	1c0a      	adds	r2, r1, #0
 800150e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2241      	movs	r2, #65	; 0x41
 8001514:	5c9b      	ldrb	r3, [r3, r2]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b20      	cmp	r3, #32
 800151a:	d000      	beq.n	800151e <HAL_I2C_Mem_Write+0x32>
 800151c:	e10c      	b.n	8001738 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800151e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001520:	2b00      	cmp	r3, #0
 8001522:	d004      	beq.n	800152e <HAL_I2C_Mem_Write+0x42>
 8001524:	232c      	movs	r3, #44	; 0x2c
 8001526:	18fb      	adds	r3, r7, r3
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d105      	bne.n	800153a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2280      	movs	r2, #128	; 0x80
 8001532:	0092      	lsls	r2, r2, #2
 8001534:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e0ff      	b.n	800173a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2240      	movs	r2, #64	; 0x40
 800153e:	5c9b      	ldrb	r3, [r3, r2]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d101      	bne.n	8001548 <HAL_I2C_Mem_Write+0x5c>
 8001544:	2302      	movs	r3, #2
 8001546:	e0f8      	b.n	800173a <HAL_I2C_Mem_Write+0x24e>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2240      	movs	r2, #64	; 0x40
 800154c:	2101      	movs	r1, #1
 800154e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001550:	f7ff fd5c 	bl	800100c <HAL_GetTick>
 8001554:	0003      	movs	r3, r0
 8001556:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	0219      	lsls	r1, r3, #8
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	2319      	movs	r3, #25
 8001564:	2201      	movs	r2, #1
 8001566:	f000 fb0b 	bl	8001b80 <I2C_WaitOnFlagUntilTimeout>
 800156a:	1e03      	subs	r3, r0, #0
 800156c:	d001      	beq.n	8001572 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e0e3      	b.n	800173a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2241      	movs	r2, #65	; 0x41
 8001576:	2121      	movs	r1, #33	; 0x21
 8001578:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2242      	movs	r2, #66	; 0x42
 800157e:	2140      	movs	r1, #64	; 0x40
 8001580:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2200      	movs	r2, #0
 8001586:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800158c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	222c      	movs	r2, #44	; 0x2c
 8001592:	18ba      	adds	r2, r7, r2
 8001594:	8812      	ldrh	r2, [r2, #0]
 8001596:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2200      	movs	r2, #0
 800159c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800159e:	1dbb      	adds	r3, r7, #6
 80015a0:	881c      	ldrh	r4, [r3, #0]
 80015a2:	2308      	movs	r3, #8
 80015a4:	18fb      	adds	r3, r7, r3
 80015a6:	881a      	ldrh	r2, [r3, #0]
 80015a8:	230a      	movs	r3, #10
 80015aa:	18fb      	adds	r3, r7, r3
 80015ac:	8819      	ldrh	r1, [r3, #0]
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	9301      	str	r3, [sp, #4]
 80015b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	0023      	movs	r3, r4
 80015ba:	f000 f9f9 	bl	80019b0 <I2C_RequestMemoryWrite>
 80015be:	1e03      	subs	r3, r0, #0
 80015c0:	d005      	beq.n	80015ce <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2240      	movs	r2, #64	; 0x40
 80015c6:	2100      	movs	r1, #0
 80015c8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e0b5      	b.n	800173a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	2bff      	cmp	r3, #255	; 0xff
 80015d6:	d911      	bls.n	80015fc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	22ff      	movs	r2, #255	; 0xff
 80015dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	045c      	lsls	r4, r3, #17
 80015e8:	230a      	movs	r3, #10
 80015ea:	18fb      	adds	r3, r7, r3
 80015ec:	8819      	ldrh	r1, [r3, #0]
 80015ee:	68f8      	ldr	r0, [r7, #12]
 80015f0:	2300      	movs	r3, #0
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	0023      	movs	r3, r4
 80015f6:	f000 fc9b 	bl	8001f30 <I2C_TransferConfig>
 80015fa:	e012      	b.n	8001622 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001600:	b29a      	uxth	r2, r3
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800160a:	b2da      	uxtb	r2, r3
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	049c      	lsls	r4, r3, #18
 8001610:	230a      	movs	r3, #10
 8001612:	18fb      	adds	r3, r7, r3
 8001614:	8819      	ldrh	r1, [r3, #0]
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	2300      	movs	r3, #0
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	0023      	movs	r3, r4
 800161e:	f000 fc87 	bl	8001f30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	0018      	movs	r0, r3
 800162a:	f000 faf7 	bl	8001c1c <I2C_WaitOnTXISFlagUntilTimeout>
 800162e:	1e03      	subs	r3, r0, #0
 8001630:	d001      	beq.n	8001636 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e081      	b.n	800173a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163a:	781a      	ldrb	r2, [r3, #0]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	1c5a      	adds	r2, r3, #1
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001650:	b29b      	uxth	r3, r3
 8001652:	3b01      	subs	r3, #1
 8001654:	b29a      	uxth	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800165e:	3b01      	subs	r3, #1
 8001660:	b29a      	uxth	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800166a:	b29b      	uxth	r3, r3
 800166c:	2b00      	cmp	r3, #0
 800166e:	d03a      	beq.n	80016e6 <HAL_I2C_Mem_Write+0x1fa>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001674:	2b00      	cmp	r3, #0
 8001676:	d136      	bne.n	80016e6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	0013      	movs	r3, r2
 8001682:	2200      	movs	r2, #0
 8001684:	2180      	movs	r1, #128	; 0x80
 8001686:	f000 fa7b 	bl	8001b80 <I2C_WaitOnFlagUntilTimeout>
 800168a:	1e03      	subs	r3, r0, #0
 800168c:	d001      	beq.n	8001692 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e053      	b.n	800173a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001696:	b29b      	uxth	r3, r3
 8001698:	2bff      	cmp	r3, #255	; 0xff
 800169a:	d911      	bls.n	80016c0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	22ff      	movs	r2, #255	; 0xff
 80016a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	045c      	lsls	r4, r3, #17
 80016ac:	230a      	movs	r3, #10
 80016ae:	18fb      	adds	r3, r7, r3
 80016b0:	8819      	ldrh	r1, [r3, #0]
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	2300      	movs	r3, #0
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	0023      	movs	r3, r4
 80016ba:	f000 fc39 	bl	8001f30 <I2C_TransferConfig>
 80016be:	e012      	b.n	80016e6 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	049c      	lsls	r4, r3, #18
 80016d4:	230a      	movs	r3, #10
 80016d6:	18fb      	adds	r3, r7, r3
 80016d8:	8819      	ldrh	r1, [r3, #0]
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	2300      	movs	r3, #0
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	0023      	movs	r3, r4
 80016e2:	f000 fc25 	bl	8001f30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d198      	bne.n	8001622 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	0018      	movs	r0, r3
 80016f8:	f000 fad6 	bl	8001ca8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80016fc:	1e03      	subs	r3, r0, #0
 80016fe:	d001      	beq.n	8001704 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e01a      	b.n	800173a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2220      	movs	r2, #32
 800170a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	490b      	ldr	r1, [pc, #44]	; (8001744 <HAL_I2C_Mem_Write+0x258>)
 8001718:	400a      	ands	r2, r1
 800171a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2241      	movs	r2, #65	; 0x41
 8001720:	2120      	movs	r1, #32
 8001722:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2242      	movs	r2, #66	; 0x42
 8001728:	2100      	movs	r1, #0
 800172a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2240      	movs	r2, #64	; 0x40
 8001730:	2100      	movs	r1, #0
 8001732:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	e000      	b.n	800173a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001738:	2302      	movs	r3, #2
  }
}
 800173a:	0018      	movs	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	b007      	add	sp, #28
 8001740:	bd90      	pop	{r4, r7, pc}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	fe00e800 	.word	0xfe00e800

08001748 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b089      	sub	sp, #36	; 0x24
 800174c:	af02      	add	r7, sp, #8
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	000c      	movs	r4, r1
 8001752:	0010      	movs	r0, r2
 8001754:	0019      	movs	r1, r3
 8001756:	230a      	movs	r3, #10
 8001758:	18fb      	adds	r3, r7, r3
 800175a:	1c22      	adds	r2, r4, #0
 800175c:	801a      	strh	r2, [r3, #0]
 800175e:	2308      	movs	r3, #8
 8001760:	18fb      	adds	r3, r7, r3
 8001762:	1c02      	adds	r2, r0, #0
 8001764:	801a      	strh	r2, [r3, #0]
 8001766:	1dbb      	adds	r3, r7, #6
 8001768:	1c0a      	adds	r2, r1, #0
 800176a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2241      	movs	r2, #65	; 0x41
 8001770:	5c9b      	ldrb	r3, [r3, r2]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b20      	cmp	r3, #32
 8001776:	d000      	beq.n	800177a <HAL_I2C_Mem_Read+0x32>
 8001778:	e110      	b.n	800199c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800177a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800177c:	2b00      	cmp	r3, #0
 800177e:	d004      	beq.n	800178a <HAL_I2C_Mem_Read+0x42>
 8001780:	232c      	movs	r3, #44	; 0x2c
 8001782:	18fb      	adds	r3, r7, r3
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d105      	bne.n	8001796 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2280      	movs	r2, #128	; 0x80
 800178e:	0092      	lsls	r2, r2, #2
 8001790:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e103      	b.n	800199e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2240      	movs	r2, #64	; 0x40
 800179a:	5c9b      	ldrb	r3, [r3, r2]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d101      	bne.n	80017a4 <HAL_I2C_Mem_Read+0x5c>
 80017a0:	2302      	movs	r3, #2
 80017a2:	e0fc      	b.n	800199e <HAL_I2C_Mem_Read+0x256>
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2240      	movs	r2, #64	; 0x40
 80017a8:	2101      	movs	r1, #1
 80017aa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017ac:	f7ff fc2e 	bl	800100c <HAL_GetTick>
 80017b0:	0003      	movs	r3, r0
 80017b2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	0219      	lsls	r1, r3, #8
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	2319      	movs	r3, #25
 80017c0:	2201      	movs	r2, #1
 80017c2:	f000 f9dd 	bl	8001b80 <I2C_WaitOnFlagUntilTimeout>
 80017c6:	1e03      	subs	r3, r0, #0
 80017c8:	d001      	beq.n	80017ce <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e0e7      	b.n	800199e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2241      	movs	r2, #65	; 0x41
 80017d2:	2122      	movs	r1, #34	; 0x22
 80017d4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2242      	movs	r2, #66	; 0x42
 80017da:	2140      	movs	r1, #64	; 0x40
 80017dc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2200      	movs	r2, #0
 80017e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	222c      	movs	r2, #44	; 0x2c
 80017ee:	18ba      	adds	r2, r7, r2
 80017f0:	8812      	ldrh	r2, [r2, #0]
 80017f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017fa:	1dbb      	adds	r3, r7, #6
 80017fc:	881c      	ldrh	r4, [r3, #0]
 80017fe:	2308      	movs	r3, #8
 8001800:	18fb      	adds	r3, r7, r3
 8001802:	881a      	ldrh	r2, [r3, #0]
 8001804:	230a      	movs	r3, #10
 8001806:	18fb      	adds	r3, r7, r3
 8001808:	8819      	ldrh	r1, [r3, #0]
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	0023      	movs	r3, r4
 8001816:	f000 f92f 	bl	8001a78 <I2C_RequestMemoryRead>
 800181a:	1e03      	subs	r3, r0, #0
 800181c:	d005      	beq.n	800182a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2240      	movs	r2, #64	; 0x40
 8001822:	2100      	movs	r1, #0
 8001824:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e0b9      	b.n	800199e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800182e:	b29b      	uxth	r3, r3
 8001830:	2bff      	cmp	r3, #255	; 0xff
 8001832:	d911      	bls.n	8001858 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	22ff      	movs	r2, #255	; 0xff
 8001838:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800183e:	b2da      	uxtb	r2, r3
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	045c      	lsls	r4, r3, #17
 8001844:	230a      	movs	r3, #10
 8001846:	18fb      	adds	r3, r7, r3
 8001848:	8819      	ldrh	r1, [r3, #0]
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	4b56      	ldr	r3, [pc, #344]	; (80019a8 <HAL_I2C_Mem_Read+0x260>)
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	0023      	movs	r3, r4
 8001852:	f000 fb6d 	bl	8001f30 <I2C_TransferConfig>
 8001856:	e012      	b.n	800187e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185c:	b29a      	uxth	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001866:	b2da      	uxtb	r2, r3
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	049c      	lsls	r4, r3, #18
 800186c:	230a      	movs	r3, #10
 800186e:	18fb      	adds	r3, r7, r3
 8001870:	8819      	ldrh	r1, [r3, #0]
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	4b4c      	ldr	r3, [pc, #304]	; (80019a8 <HAL_I2C_Mem_Read+0x260>)
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	0023      	movs	r3, r4
 800187a:	f000 fb59 	bl	8001f30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800187e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	0013      	movs	r3, r2
 8001888:	2200      	movs	r2, #0
 800188a:	2104      	movs	r1, #4
 800188c:	f000 f978 	bl	8001b80 <I2C_WaitOnFlagUntilTimeout>
 8001890:	1e03      	subs	r3, r0, #0
 8001892:	d001      	beq.n	8001898 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e082      	b.n	800199e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b4:	3b01      	subs	r3, #1
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	3b01      	subs	r3, #1
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d03a      	beq.n	800194a <HAL_I2C_Mem_Read+0x202>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d136      	bne.n	800194a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	0013      	movs	r3, r2
 80018e6:	2200      	movs	r2, #0
 80018e8:	2180      	movs	r1, #128	; 0x80
 80018ea:	f000 f949 	bl	8001b80 <I2C_WaitOnFlagUntilTimeout>
 80018ee:	1e03      	subs	r3, r0, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e053      	b.n	800199e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	2bff      	cmp	r3, #255	; 0xff
 80018fe:	d911      	bls.n	8001924 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	22ff      	movs	r2, #255	; 0xff
 8001904:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800190a:	b2da      	uxtb	r2, r3
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	045c      	lsls	r4, r3, #17
 8001910:	230a      	movs	r3, #10
 8001912:	18fb      	adds	r3, r7, r3
 8001914:	8819      	ldrh	r1, [r3, #0]
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	2300      	movs	r3, #0
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	0023      	movs	r3, r4
 800191e:	f000 fb07 	bl	8001f30 <I2C_TransferConfig>
 8001922:	e012      	b.n	800194a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001928:	b29a      	uxth	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001932:	b2da      	uxtb	r2, r3
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	049c      	lsls	r4, r3, #18
 8001938:	230a      	movs	r3, #10
 800193a:	18fb      	adds	r3, r7, r3
 800193c:	8819      	ldrh	r1, [r3, #0]
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	2300      	movs	r3, #0
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	0023      	movs	r3, r4
 8001946:	f000 faf3 	bl	8001f30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800194e:	b29b      	uxth	r3, r3
 8001950:	2b00      	cmp	r3, #0
 8001952:	d194      	bne.n	800187e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	0018      	movs	r0, r3
 800195c:	f000 f9a4 	bl	8001ca8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001960:	1e03      	subs	r3, r0, #0
 8001962:	d001      	beq.n	8001968 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e01a      	b.n	800199e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2220      	movs	r2, #32
 800196e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	490c      	ldr	r1, [pc, #48]	; (80019ac <HAL_I2C_Mem_Read+0x264>)
 800197c:	400a      	ands	r2, r1
 800197e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2241      	movs	r2, #65	; 0x41
 8001984:	2120      	movs	r1, #32
 8001986:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2242      	movs	r2, #66	; 0x42
 800198c:	2100      	movs	r1, #0
 800198e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2240      	movs	r2, #64	; 0x40
 8001994:	2100      	movs	r1, #0
 8001996:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	e000      	b.n	800199e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800199c:	2302      	movs	r3, #2
  }
}
 800199e:	0018      	movs	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b007      	add	sp, #28
 80019a4:	bd90      	pop	{r4, r7, pc}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	80002400 	.word	0x80002400
 80019ac:	fe00e800 	.word	0xfe00e800

080019b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80019b0:	b5b0      	push	{r4, r5, r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af02      	add	r7, sp, #8
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	000c      	movs	r4, r1
 80019ba:	0010      	movs	r0, r2
 80019bc:	0019      	movs	r1, r3
 80019be:	250a      	movs	r5, #10
 80019c0:	197b      	adds	r3, r7, r5
 80019c2:	1c22      	adds	r2, r4, #0
 80019c4:	801a      	strh	r2, [r3, #0]
 80019c6:	2308      	movs	r3, #8
 80019c8:	18fb      	adds	r3, r7, r3
 80019ca:	1c02      	adds	r2, r0, #0
 80019cc:	801a      	strh	r2, [r3, #0]
 80019ce:	1dbb      	adds	r3, r7, #6
 80019d0:	1c0a      	adds	r2, r1, #0
 80019d2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80019d4:	1dbb      	adds	r3, r7, #6
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	045c      	lsls	r4, r3, #17
 80019de:	197b      	adds	r3, r7, r5
 80019e0:	8819      	ldrh	r1, [r3, #0]
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <I2C_RequestMemoryWrite+0xc4>)
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	0023      	movs	r3, r4
 80019ea:	f000 faa1 	bl	8001f30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f0:	6a39      	ldr	r1, [r7, #32]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	0018      	movs	r0, r3
 80019f6:	f000 f911 	bl	8001c1c <I2C_WaitOnTXISFlagUntilTimeout>
 80019fa:	1e03      	subs	r3, r0, #0
 80019fc:	d001      	beq.n	8001a02 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e033      	b.n	8001a6a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a02:	1dbb      	adds	r3, r7, #6
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d107      	bne.n	8001a1a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a0a:	2308      	movs	r3, #8
 8001a0c:	18fb      	adds	r3, r7, r3
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	629a      	str	r2, [r3, #40]	; 0x28
 8001a18:	e019      	b.n	8001a4e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a1a:	2308      	movs	r3, #8
 8001a1c:	18fb      	adds	r3, r7, r3
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a2e:	6a39      	ldr	r1, [r7, #32]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	0018      	movs	r0, r3
 8001a34:	f000 f8f2 	bl	8001c1c <I2C_WaitOnTXISFlagUntilTimeout>
 8001a38:	1e03      	subs	r3, r0, #0
 8001a3a:	d001      	beq.n	8001a40 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e014      	b.n	8001a6a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a40:	2308      	movs	r3, #8
 8001a42:	18fb      	adds	r3, r7, r3
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001a4e:	6a3a      	ldr	r2, [r7, #32]
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	0013      	movs	r3, r2
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2180      	movs	r1, #128	; 0x80
 8001a5c:	f000 f890 	bl	8001b80 <I2C_WaitOnFlagUntilTimeout>
 8001a60:	1e03      	subs	r3, r0, #0
 8001a62:	d001      	beq.n	8001a68 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e000      	b.n	8001a6a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	b004      	add	sp, #16
 8001a70:	bdb0      	pop	{r4, r5, r7, pc}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	80002000 	.word	0x80002000

08001a78 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001a78:	b5b0      	push	{r4, r5, r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af02      	add	r7, sp, #8
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	000c      	movs	r4, r1
 8001a82:	0010      	movs	r0, r2
 8001a84:	0019      	movs	r1, r3
 8001a86:	250a      	movs	r5, #10
 8001a88:	197b      	adds	r3, r7, r5
 8001a8a:	1c22      	adds	r2, r4, #0
 8001a8c:	801a      	strh	r2, [r3, #0]
 8001a8e:	2308      	movs	r3, #8
 8001a90:	18fb      	adds	r3, r7, r3
 8001a92:	1c02      	adds	r2, r0, #0
 8001a94:	801a      	strh	r2, [r3, #0]
 8001a96:	1dbb      	adds	r3, r7, #6
 8001a98:	1c0a      	adds	r2, r1, #0
 8001a9a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001a9c:	1dbb      	adds	r3, r7, #6
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	197b      	adds	r3, r7, r5
 8001aa4:	8819      	ldrh	r1, [r3, #0]
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <I2C_RequestMemoryRead+0xc0>)
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	2300      	movs	r3, #0
 8001aae:	f000 fa3f 	bl	8001f30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab4:	6a39      	ldr	r1, [r7, #32]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f000 f8af 	bl	8001c1c <I2C_WaitOnTXISFlagUntilTimeout>
 8001abe:	1e03      	subs	r3, r0, #0
 8001ac0:	d001      	beq.n	8001ac6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e033      	b.n	8001b2e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ac6:	1dbb      	adds	r3, r7, #6
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d107      	bne.n	8001ade <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ace:	2308      	movs	r3, #8
 8001ad0:	18fb      	adds	r3, r7, r3
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	629a      	str	r2, [r3, #40]	; 0x28
 8001adc:	e019      	b.n	8001b12 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001ade:	2308      	movs	r3, #8
 8001ae0:	18fb      	adds	r3, r7, r3
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	0a1b      	lsrs	r3, r3, #8
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af2:	6a39      	ldr	r1, [r7, #32]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	0018      	movs	r0, r3
 8001af8:	f000 f890 	bl	8001c1c <I2C_WaitOnTXISFlagUntilTimeout>
 8001afc:	1e03      	subs	r3, r0, #0
 8001afe:	d001      	beq.n	8001b04 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e014      	b.n	8001b2e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b04:	2308      	movs	r3, #8
 8001b06:	18fb      	adds	r3, r7, r3
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001b12:	6a3a      	ldr	r2, [r7, #32]
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	0013      	movs	r3, r2
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2140      	movs	r1, #64	; 0x40
 8001b20:	f000 f82e 	bl	8001b80 <I2C_WaitOnFlagUntilTimeout>
 8001b24:	1e03      	subs	r3, r0, #0
 8001b26:	d001      	beq.n	8001b2c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	0018      	movs	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	b004      	add	sp, #16
 8001b34:	bdb0      	pop	{r4, r5, r7, pc}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	80002000 	.word	0x80002000

08001b3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d103      	bne.n	8001b5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2200      	movs	r2, #0
 8001b58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	2201      	movs	r2, #1
 8001b62:	4013      	ands	r3, r2
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d007      	beq.n	8001b78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699a      	ldr	r2, [r3, #24]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2101      	movs	r1, #1
 8001b74:	430a      	orrs	r2, r1
 8001b76:	619a      	str	r2, [r3, #24]
  }
}
 8001b78:	46c0      	nop			; (mov r8, r8)
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	b002      	add	sp, #8
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	603b      	str	r3, [r7, #0]
 8001b8c:	1dfb      	adds	r3, r7, #7
 8001b8e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b90:	e030      	b.n	8001bf4 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	3301      	adds	r3, #1
 8001b96:	d02d      	beq.n	8001bf4 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b98:	f7ff fa38 	bl	800100c <HAL_GetTick>
 8001b9c:	0002      	movs	r2, r0
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d302      	bcc.n	8001bae <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d122      	bne.n	8001bf4 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	425a      	negs	r2, r3
 8001bbe:	4153      	adcs	r3, r2
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	001a      	movs	r2, r3
 8001bc4:	1dfb      	adds	r3, r7, #7
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d113      	bne.n	8001bf4 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2241      	movs	r2, #65	; 0x41
 8001bdc:	2120      	movs	r1, #32
 8001bde:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2242      	movs	r2, #66	; 0x42
 8001be4:	2100      	movs	r1, #0
 8001be6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2240      	movs	r2, #64	; 0x40
 8001bec:	2100      	movs	r1, #0
 8001bee:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e00f      	b.n	8001c14 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	425a      	negs	r2, r3
 8001c04:	4153      	adcs	r3, r2
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	001a      	movs	r2, r3
 8001c0a:	1dfb      	adds	r3, r7, #7
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d0bf      	beq.n	8001b92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	0018      	movs	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b004      	add	sp, #16
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c28:	e032      	b.n	8001c90 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	0018      	movs	r0, r3
 8001c32:	f000 f87d 	bl	8001d30 <I2C_IsErrorOccurred>
 8001c36:	1e03      	subs	r3, r0, #0
 8001c38:	d001      	beq.n	8001c3e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e030      	b.n	8001ca0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	3301      	adds	r3, #1
 8001c42:	d025      	beq.n	8001c90 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c44:	f7ff f9e2 	bl	800100c <HAL_GetTick>
 8001c48:	0002      	movs	r2, r0
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d302      	bcc.n	8001c5a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d11a      	bne.n	8001c90 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	2202      	movs	r2, #2
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d013      	beq.n	8001c90 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2241      	movs	r2, #65	; 0x41
 8001c78:	2120      	movs	r1, #32
 8001c7a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2242      	movs	r2, #66	; 0x42
 8001c80:	2100      	movs	r1, #0
 8001c82:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2240      	movs	r2, #64	; 0x40
 8001c88:	2100      	movs	r1, #0
 8001c8a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e007      	b.n	8001ca0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	2202      	movs	r2, #2
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d1c5      	bne.n	8001c2a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	b004      	add	sp, #16
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cb4:	e02f      	b.n	8001d16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	68b9      	ldr	r1, [r7, #8]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f000 f837 	bl	8001d30 <I2C_IsErrorOccurred>
 8001cc2:	1e03      	subs	r3, r0, #0
 8001cc4:	d001      	beq.n	8001cca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e02d      	b.n	8001d26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cca:	f7ff f99f 	bl	800100c <HAL_GetTick>
 8001cce:	0002      	movs	r2, r0
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	68ba      	ldr	r2, [r7, #8]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d302      	bcc.n	8001ce0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d11a      	bne.n	8001d16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	4013      	ands	r3, r2
 8001cea:	2b20      	cmp	r3, #32
 8001cec:	d013      	beq.n	8001d16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2241      	movs	r2, #65	; 0x41
 8001cfe:	2120      	movs	r1, #32
 8001d00:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2242      	movs	r2, #66	; 0x42
 8001d06:	2100      	movs	r1, #0
 8001d08:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2240      	movs	r2, #64	; 0x40
 8001d0e:	2100      	movs	r1, #0
 8001d10:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e007      	b.n	8001d26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	2220      	movs	r2, #32
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b20      	cmp	r3, #32
 8001d22:	d1c8      	bne.n	8001cb6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	0018      	movs	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	b004      	add	sp, #16
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b08b      	sub	sp, #44	; 0x2c
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d3c:	2327      	movs	r3, #39	; 0x27
 8001d3e:	18fb      	adds	r3, r7, r3
 8001d40:	2200      	movs	r2, #0
 8001d42:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	2210      	movs	r2, #16
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d100      	bne.n	8001d5e <I2C_IsErrorOccurred+0x2e>
 8001d5c:	e082      	b.n	8001e64 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2210      	movs	r2, #16
 8001d64:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d66:	e060      	b.n	8001e2a <I2C_IsErrorOccurred+0xfa>
 8001d68:	2427      	movs	r4, #39	; 0x27
 8001d6a:	193b      	adds	r3, r7, r4
 8001d6c:	193a      	adds	r2, r7, r4
 8001d6e:	7812      	ldrb	r2, [r2, #0]
 8001d70:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	3301      	adds	r3, #1
 8001d76:	d058      	beq.n	8001e2a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d78:	f7ff f948 	bl	800100c <HAL_GetTick>
 8001d7c:	0002      	movs	r2, r0
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d306      	bcc.n	8001d96 <I2C_IsErrorOccurred+0x66>
 8001d88:	193b      	adds	r3, r7, r4
 8001d8a:	193a      	adds	r2, r7, r4
 8001d8c:	7812      	ldrb	r2, [r2, #0]
 8001d8e:	701a      	strb	r2, [r3, #0]
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d149      	bne.n	8001e2a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	01db      	lsls	r3, r3, #7
 8001da0:	4013      	ands	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001da4:	2013      	movs	r0, #19
 8001da6:	183b      	adds	r3, r7, r0
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	2142      	movs	r1, #66	; 0x42
 8001dac:	5c52      	ldrb	r2, [r2, r1]
 8001dae:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699a      	ldr	r2, [r3, #24]
 8001db6:	2380      	movs	r3, #128	; 0x80
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	401a      	ands	r2, r3
 8001dbc:	2380      	movs	r3, #128	; 0x80
 8001dbe:	021b      	lsls	r3, r3, #8
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d126      	bne.n	8001e12 <I2C_IsErrorOccurred+0xe2>
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	01db      	lsls	r3, r3, #7
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d021      	beq.n	8001e12 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001dce:	183b      	adds	r3, r7, r0
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b20      	cmp	r3, #32
 8001dd4:	d01d      	beq.n	8001e12 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2180      	movs	r1, #128	; 0x80
 8001de2:	01c9      	lsls	r1, r1, #7
 8001de4:	430a      	orrs	r2, r1
 8001de6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001de8:	f7ff f910 	bl	800100c <HAL_GetTick>
 8001dec:	0003      	movs	r3, r0
 8001dee:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001df0:	e00f      	b.n	8001e12 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001df2:	f7ff f90b 	bl	800100c <HAL_GetTick>
 8001df6:	0002      	movs	r2, r0
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b19      	cmp	r3, #25
 8001dfe:	d908      	bls.n	8001e12 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001e00:	6a3b      	ldr	r3, [r7, #32]
 8001e02:	2220      	movs	r2, #32
 8001e04:	4313      	orrs	r3, r2
 8001e06:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001e08:	2327      	movs	r3, #39	; 0x27
 8001e0a:	18fb      	adds	r3, r7, r3
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	701a      	strb	r2, [r3, #0]

              break;
 8001e10:	e00b      	b.n	8001e2a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	2220      	movs	r2, #32
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	2127      	movs	r1, #39	; 0x27
 8001e1e:	187a      	adds	r2, r7, r1
 8001e20:	1879      	adds	r1, r7, r1
 8001e22:	7809      	ldrb	r1, [r1, #0]
 8001e24:	7011      	strb	r1, [r2, #0]
 8001e26:	2b20      	cmp	r3, #32
 8001e28:	d1e3      	bne.n	8001df2 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	2220      	movs	r2, #32
 8001e32:	4013      	ands	r3, r2
 8001e34:	2b20      	cmp	r3, #32
 8001e36:	d004      	beq.n	8001e42 <I2C_IsErrorOccurred+0x112>
 8001e38:	2327      	movs	r3, #39	; 0x27
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d092      	beq.n	8001d68 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001e42:	2327      	movs	r3, #39	; 0x27
 8001e44:	18fb      	adds	r3, r7, r3
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d103      	bne.n	8001e54 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2220      	movs	r2, #32
 8001e52:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	2204      	movs	r2, #4
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001e5c:	2327      	movs	r3, #39	; 0x27
 8001e5e:	18fb      	adds	r3, r7, r3
 8001e60:	2201      	movs	r2, #1
 8001e62:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4013      	ands	r3, r2
 8001e74:	d00c      	beq.n	8001e90 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2280      	movs	r2, #128	; 0x80
 8001e84:	0052      	lsls	r2, r2, #1
 8001e86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e88:	2327      	movs	r3, #39	; 0x27
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4013      	ands	r3, r2
 8001e98:	d00c      	beq.n	8001eb4 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
 8001e9c:	2208      	movs	r2, #8
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2280      	movs	r2, #128	; 0x80
 8001ea8:	00d2      	lsls	r2, r2, #3
 8001eaa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001eac:	2327      	movs	r3, #39	; 0x27
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d00c      	beq.n	8001ed8 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2280      	movs	r2, #128	; 0x80
 8001ecc:	0092      	lsls	r2, r2, #2
 8001ece:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ed0:	2327      	movs	r3, #39	; 0x27
 8001ed2:	18fb      	adds	r3, r7, r3
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001ed8:	2327      	movs	r3, #39	; 0x27
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d01d      	beq.n	8001f1e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f7ff fe29 	bl	8001b3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	490d      	ldr	r1, [pc, #52]	; (8001f2c <I2C_IsErrorOccurred+0x1fc>)
 8001ef6:	400a      	ands	r2, r1
 8001ef8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001efe:	6a3b      	ldr	r3, [r7, #32]
 8001f00:	431a      	orrs	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2241      	movs	r2, #65	; 0x41
 8001f0a:	2120      	movs	r1, #32
 8001f0c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2242      	movs	r2, #66	; 0x42
 8001f12:	2100      	movs	r1, #0
 8001f14:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2240      	movs	r2, #64	; 0x40
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001f1e:	2327      	movs	r3, #39	; 0x27
 8001f20:	18fb      	adds	r3, r7, r3
 8001f22:	781b      	ldrb	r3, [r3, #0]
}
 8001f24:	0018      	movs	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	b00b      	add	sp, #44	; 0x2c
 8001f2a:	bd90      	pop	{r4, r7, pc}
 8001f2c:	fe00e800 	.word	0xfe00e800

08001f30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f30:	b590      	push	{r4, r7, lr}
 8001f32:	b087      	sub	sp, #28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	0008      	movs	r0, r1
 8001f3a:	0011      	movs	r1, r2
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	240a      	movs	r4, #10
 8001f40:	193b      	adds	r3, r7, r4
 8001f42:	1c02      	adds	r2, r0, #0
 8001f44:	801a      	strh	r2, [r3, #0]
 8001f46:	2009      	movs	r0, #9
 8001f48:	183b      	adds	r3, r7, r0
 8001f4a:	1c0a      	adds	r2, r1, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f4e:	193b      	adds	r3, r7, r4
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	059b      	lsls	r3, r3, #22
 8001f54:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f56:	183b      	adds	r3, r7, r0
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	0419      	lsls	r1, r3, #16
 8001f5c:	23ff      	movs	r3, #255	; 0xff
 8001f5e:	041b      	lsls	r3, r3, #16
 8001f60:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f62:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	085b      	lsrs	r3, r3, #1
 8001f70:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f7a:	0d51      	lsrs	r1, r2, #21
 8001f7c:	2280      	movs	r2, #128	; 0x80
 8001f7e:	00d2      	lsls	r2, r2, #3
 8001f80:	400a      	ands	r2, r1
 8001f82:	4907      	ldr	r1, [pc, #28]	; (8001fa0 <I2C_TransferConfig+0x70>)
 8001f84:	430a      	orrs	r2, r1
 8001f86:	43d2      	mvns	r2, r2
 8001f88:	401a      	ands	r2, r3
 8001f8a:	0011      	movs	r1, r2
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b007      	add	sp, #28
 8001f9c:	bd90      	pop	{r4, r7, pc}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	03ff63ff 	.word	0x03ff63ff

08001fa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e301      	b.n	80025ba <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	d100      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x1e>
 8001fc0:	e08d      	b.n	80020de <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001fc2:	4bc3      	ldr	r3, [pc, #780]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	220c      	movs	r2, #12
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d00e      	beq.n	8001fec <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fce:	4bc0      	ldr	r3, [pc, #768]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	220c      	movs	r2, #12
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d116      	bne.n	8002008 <HAL_RCC_OscConfig+0x64>
 8001fda:	4bbd      	ldr	r3, [pc, #756]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	025b      	lsls	r3, r3, #9
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	025b      	lsls	r3, r3, #9
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d10d      	bne.n	8002008 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fec:	4bb8      	ldr	r3, [pc, #736]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	029b      	lsls	r3, r3, #10
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d100      	bne.n	8001ffa <HAL_RCC_OscConfig+0x56>
 8001ff8:	e070      	b.n	80020dc <HAL_RCC_OscConfig+0x138>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d000      	beq.n	8002004 <HAL_RCC_OscConfig+0x60>
 8002002:	e06b      	b.n	80020dc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e2d8      	b.n	80025ba <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d107      	bne.n	8002020 <HAL_RCC_OscConfig+0x7c>
 8002010:	4baf      	ldr	r3, [pc, #700]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4bae      	ldr	r3, [pc, #696]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 8002016:	2180      	movs	r1, #128	; 0x80
 8002018:	0249      	lsls	r1, r1, #9
 800201a:	430a      	orrs	r2, r1
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	e02f      	b.n	8002080 <HAL_RCC_OscConfig+0xdc>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10c      	bne.n	8002042 <HAL_RCC_OscConfig+0x9e>
 8002028:	4ba9      	ldr	r3, [pc, #676]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4ba8      	ldr	r3, [pc, #672]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 800202e:	49a9      	ldr	r1, [pc, #676]	; (80022d4 <HAL_RCC_OscConfig+0x330>)
 8002030:	400a      	ands	r2, r1
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	4ba6      	ldr	r3, [pc, #664]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4ba5      	ldr	r3, [pc, #660]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 800203a:	49a7      	ldr	r1, [pc, #668]	; (80022d8 <HAL_RCC_OscConfig+0x334>)
 800203c:	400a      	ands	r2, r1
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	e01e      	b.n	8002080 <HAL_RCC_OscConfig+0xdc>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b05      	cmp	r3, #5
 8002048:	d10e      	bne.n	8002068 <HAL_RCC_OscConfig+0xc4>
 800204a:	4ba1      	ldr	r3, [pc, #644]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	4ba0      	ldr	r3, [pc, #640]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 8002050:	2180      	movs	r1, #128	; 0x80
 8002052:	02c9      	lsls	r1, r1, #11
 8002054:	430a      	orrs	r2, r1
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	4b9d      	ldr	r3, [pc, #628]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4b9c      	ldr	r3, [pc, #624]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 800205e:	2180      	movs	r1, #128	; 0x80
 8002060:	0249      	lsls	r1, r1, #9
 8002062:	430a      	orrs	r2, r1
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	e00b      	b.n	8002080 <HAL_RCC_OscConfig+0xdc>
 8002068:	4b99      	ldr	r3, [pc, #612]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	4b98      	ldr	r3, [pc, #608]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 800206e:	4999      	ldr	r1, [pc, #612]	; (80022d4 <HAL_RCC_OscConfig+0x330>)
 8002070:	400a      	ands	r2, r1
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	4b96      	ldr	r3, [pc, #600]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b95      	ldr	r3, [pc, #596]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 800207a:	4997      	ldr	r1, [pc, #604]	; (80022d8 <HAL_RCC_OscConfig+0x334>)
 800207c:	400a      	ands	r2, r1
 800207e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d014      	beq.n	80020b2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002088:	f7fe ffc0 	bl	800100c <HAL_GetTick>
 800208c:	0003      	movs	r3, r0
 800208e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002092:	f7fe ffbb 	bl	800100c <HAL_GetTick>
 8002096:	0002      	movs	r2, r0
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b64      	cmp	r3, #100	; 0x64
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e28a      	b.n	80025ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a4:	4b8a      	ldr	r3, [pc, #552]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	2380      	movs	r3, #128	; 0x80
 80020aa:	029b      	lsls	r3, r3, #10
 80020ac:	4013      	ands	r3, r2
 80020ae:	d0f0      	beq.n	8002092 <HAL_RCC_OscConfig+0xee>
 80020b0:	e015      	b.n	80020de <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b2:	f7fe ffab 	bl	800100c <HAL_GetTick>
 80020b6:	0003      	movs	r3, r0
 80020b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020bc:	f7fe ffa6 	bl	800100c <HAL_GetTick>
 80020c0:	0002      	movs	r2, r0
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b64      	cmp	r3, #100	; 0x64
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e275      	b.n	80025ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ce:	4b80      	ldr	r3, [pc, #512]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	2380      	movs	r3, #128	; 0x80
 80020d4:	029b      	lsls	r3, r3, #10
 80020d6:	4013      	ands	r3, r2
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0x118>
 80020da:	e000      	b.n	80020de <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020dc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2202      	movs	r2, #2
 80020e4:	4013      	ands	r3, r2
 80020e6:	d100      	bne.n	80020ea <HAL_RCC_OscConfig+0x146>
 80020e8:	e069      	b.n	80021be <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020ea:	4b79      	ldr	r3, [pc, #484]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	220c      	movs	r2, #12
 80020f0:	4013      	ands	r3, r2
 80020f2:	d00b      	beq.n	800210c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020f4:	4b76      	ldr	r3, [pc, #472]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	220c      	movs	r2, #12
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b08      	cmp	r3, #8
 80020fe:	d11c      	bne.n	800213a <HAL_RCC_OscConfig+0x196>
 8002100:	4b73      	ldr	r3, [pc, #460]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	025b      	lsls	r3, r3, #9
 8002108:	4013      	ands	r3, r2
 800210a:	d116      	bne.n	800213a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210c:	4b70      	ldr	r3, [pc, #448]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2202      	movs	r2, #2
 8002112:	4013      	ands	r3, r2
 8002114:	d005      	beq.n	8002122 <HAL_RCC_OscConfig+0x17e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d001      	beq.n	8002122 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e24b      	b.n	80025ba <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002122:	4b6b      	ldr	r3, [pc, #428]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	22f8      	movs	r2, #248	; 0xf8
 8002128:	4393      	bics	r3, r2
 800212a:	0019      	movs	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	00da      	lsls	r2, r3, #3
 8002132:	4b67      	ldr	r3, [pc, #412]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 8002134:	430a      	orrs	r2, r1
 8002136:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002138:	e041      	b.n	80021be <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d024      	beq.n	800218c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002142:	4b63      	ldr	r3, [pc, #396]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	4b62      	ldr	r3, [pc, #392]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 8002148:	2101      	movs	r1, #1
 800214a:	430a      	orrs	r2, r1
 800214c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214e:	f7fe ff5d 	bl	800100c <HAL_GetTick>
 8002152:	0003      	movs	r3, r0
 8002154:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002158:	f7fe ff58 	bl	800100c <HAL_GetTick>
 800215c:	0002      	movs	r2, r0
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e227      	b.n	80025ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216a:	4b59      	ldr	r3, [pc, #356]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2202      	movs	r2, #2
 8002170:	4013      	ands	r3, r2
 8002172:	d0f1      	beq.n	8002158 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002174:	4b56      	ldr	r3, [pc, #344]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	22f8      	movs	r2, #248	; 0xf8
 800217a:	4393      	bics	r3, r2
 800217c:	0019      	movs	r1, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	00da      	lsls	r2, r3, #3
 8002184:	4b52      	ldr	r3, [pc, #328]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 8002186:	430a      	orrs	r2, r1
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	e018      	b.n	80021be <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800218c:	4b50      	ldr	r3, [pc, #320]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4b4f      	ldr	r3, [pc, #316]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 8002192:	2101      	movs	r1, #1
 8002194:	438a      	bics	r2, r1
 8002196:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002198:	f7fe ff38 	bl	800100c <HAL_GetTick>
 800219c:	0003      	movs	r3, r0
 800219e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021a2:	f7fe ff33 	bl	800100c <HAL_GetTick>
 80021a6:	0002      	movs	r2, r0
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e202      	b.n	80025ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b4:	4b46      	ldr	r3, [pc, #280]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2202      	movs	r2, #2
 80021ba:	4013      	ands	r3, r2
 80021bc:	d1f1      	bne.n	80021a2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2208      	movs	r2, #8
 80021c4:	4013      	ands	r3, r2
 80021c6:	d036      	beq.n	8002236 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d019      	beq.n	8002204 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021d0:	4b3f      	ldr	r3, [pc, #252]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 80021d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021d4:	4b3e      	ldr	r3, [pc, #248]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 80021d6:	2101      	movs	r1, #1
 80021d8:	430a      	orrs	r2, r1
 80021da:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021dc:	f7fe ff16 	bl	800100c <HAL_GetTick>
 80021e0:	0003      	movs	r3, r0
 80021e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e6:	f7fe ff11 	bl	800100c <HAL_GetTick>
 80021ea:	0002      	movs	r2, r0
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e1e0      	b.n	80025ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f8:	4b35      	ldr	r3, [pc, #212]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	2202      	movs	r2, #2
 80021fe:	4013      	ands	r3, r2
 8002200:	d0f1      	beq.n	80021e6 <HAL_RCC_OscConfig+0x242>
 8002202:	e018      	b.n	8002236 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002204:	4b32      	ldr	r3, [pc, #200]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 8002206:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002208:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 800220a:	2101      	movs	r1, #1
 800220c:	438a      	bics	r2, r1
 800220e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002210:	f7fe fefc 	bl	800100c <HAL_GetTick>
 8002214:	0003      	movs	r3, r0
 8002216:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800221a:	f7fe fef7 	bl	800100c <HAL_GetTick>
 800221e:	0002      	movs	r2, r0
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e1c6      	b.n	80025ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800222c:	4b28      	ldr	r3, [pc, #160]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	2202      	movs	r2, #2
 8002232:	4013      	ands	r3, r2
 8002234:	d1f1      	bne.n	800221a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2204      	movs	r2, #4
 800223c:	4013      	ands	r3, r2
 800223e:	d100      	bne.n	8002242 <HAL_RCC_OscConfig+0x29e>
 8002240:	e0b4      	b.n	80023ac <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002242:	201f      	movs	r0, #31
 8002244:	183b      	adds	r3, r7, r0
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800224a:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 800224c:	69da      	ldr	r2, [r3, #28]
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	055b      	lsls	r3, r3, #21
 8002252:	4013      	ands	r3, r2
 8002254:	d110      	bne.n	8002278 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002256:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 8002258:	69da      	ldr	r2, [r3, #28]
 800225a:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 800225c:	2180      	movs	r1, #128	; 0x80
 800225e:	0549      	lsls	r1, r1, #21
 8002260:	430a      	orrs	r2, r1
 8002262:	61da      	str	r2, [r3, #28]
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 8002266:	69da      	ldr	r2, [r3, #28]
 8002268:	2380      	movs	r3, #128	; 0x80
 800226a:	055b      	lsls	r3, r3, #21
 800226c:	4013      	ands	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002272:	183b      	adds	r3, r7, r0
 8002274:	2201      	movs	r2, #1
 8002276:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002278:	4b18      	ldr	r3, [pc, #96]	; (80022dc <HAL_RCC_OscConfig+0x338>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4013      	ands	r3, r2
 8002282:	d11a      	bne.n	80022ba <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002284:	4b15      	ldr	r3, [pc, #84]	; (80022dc <HAL_RCC_OscConfig+0x338>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b14      	ldr	r3, [pc, #80]	; (80022dc <HAL_RCC_OscConfig+0x338>)
 800228a:	2180      	movs	r1, #128	; 0x80
 800228c:	0049      	lsls	r1, r1, #1
 800228e:	430a      	orrs	r2, r1
 8002290:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002292:	f7fe febb 	bl	800100c <HAL_GetTick>
 8002296:	0003      	movs	r3, r0
 8002298:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800229c:	f7fe feb6 	bl	800100c <HAL_GetTick>
 80022a0:	0002      	movs	r2, r0
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	; 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e185      	b.n	80025ba <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <HAL_RCC_OscConfig+0x338>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	4013      	ands	r3, r2
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d10e      	bne.n	80022e0 <HAL_RCC_OscConfig+0x33c>
 80022c2:	4b03      	ldr	r3, [pc, #12]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 80022c4:	6a1a      	ldr	r2, [r3, #32]
 80022c6:	4b02      	ldr	r3, [pc, #8]	; (80022d0 <HAL_RCC_OscConfig+0x32c>)
 80022c8:	2101      	movs	r1, #1
 80022ca:	430a      	orrs	r2, r1
 80022cc:	621a      	str	r2, [r3, #32]
 80022ce:	e035      	b.n	800233c <HAL_RCC_OscConfig+0x398>
 80022d0:	40021000 	.word	0x40021000
 80022d4:	fffeffff 	.word	0xfffeffff
 80022d8:	fffbffff 	.word	0xfffbffff
 80022dc:	40007000 	.word	0x40007000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10c      	bne.n	8002302 <HAL_RCC_OscConfig+0x35e>
 80022e8:	4bb6      	ldr	r3, [pc, #728]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 80022ea:	6a1a      	ldr	r2, [r3, #32]
 80022ec:	4bb5      	ldr	r3, [pc, #724]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 80022ee:	2101      	movs	r1, #1
 80022f0:	438a      	bics	r2, r1
 80022f2:	621a      	str	r2, [r3, #32]
 80022f4:	4bb3      	ldr	r3, [pc, #716]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 80022f6:	6a1a      	ldr	r2, [r3, #32]
 80022f8:	4bb2      	ldr	r3, [pc, #712]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 80022fa:	2104      	movs	r1, #4
 80022fc:	438a      	bics	r2, r1
 80022fe:	621a      	str	r2, [r3, #32]
 8002300:	e01c      	b.n	800233c <HAL_RCC_OscConfig+0x398>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	2b05      	cmp	r3, #5
 8002308:	d10c      	bne.n	8002324 <HAL_RCC_OscConfig+0x380>
 800230a:	4bae      	ldr	r3, [pc, #696]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 800230c:	6a1a      	ldr	r2, [r3, #32]
 800230e:	4bad      	ldr	r3, [pc, #692]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 8002310:	2104      	movs	r1, #4
 8002312:	430a      	orrs	r2, r1
 8002314:	621a      	str	r2, [r3, #32]
 8002316:	4bab      	ldr	r3, [pc, #684]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 8002318:	6a1a      	ldr	r2, [r3, #32]
 800231a:	4baa      	ldr	r3, [pc, #680]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 800231c:	2101      	movs	r1, #1
 800231e:	430a      	orrs	r2, r1
 8002320:	621a      	str	r2, [r3, #32]
 8002322:	e00b      	b.n	800233c <HAL_RCC_OscConfig+0x398>
 8002324:	4ba7      	ldr	r3, [pc, #668]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 8002326:	6a1a      	ldr	r2, [r3, #32]
 8002328:	4ba6      	ldr	r3, [pc, #664]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 800232a:	2101      	movs	r1, #1
 800232c:	438a      	bics	r2, r1
 800232e:	621a      	str	r2, [r3, #32]
 8002330:	4ba4      	ldr	r3, [pc, #656]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 8002332:	6a1a      	ldr	r2, [r3, #32]
 8002334:	4ba3      	ldr	r3, [pc, #652]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 8002336:	2104      	movs	r1, #4
 8002338:	438a      	bics	r2, r1
 800233a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d014      	beq.n	800236e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002344:	f7fe fe62 	bl	800100c <HAL_GetTick>
 8002348:	0003      	movs	r3, r0
 800234a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234c:	e009      	b.n	8002362 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800234e:	f7fe fe5d 	bl	800100c <HAL_GetTick>
 8002352:	0002      	movs	r2, r0
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	4a9b      	ldr	r2, [pc, #620]	; (80025c8 <HAL_RCC_OscConfig+0x624>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e12b      	b.n	80025ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002362:	4b98      	ldr	r3, [pc, #608]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	2202      	movs	r2, #2
 8002368:	4013      	ands	r3, r2
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x3aa>
 800236c:	e013      	b.n	8002396 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236e:	f7fe fe4d 	bl	800100c <HAL_GetTick>
 8002372:	0003      	movs	r3, r0
 8002374:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002376:	e009      	b.n	800238c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002378:	f7fe fe48 	bl	800100c <HAL_GetTick>
 800237c:	0002      	movs	r2, r0
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	4a91      	ldr	r2, [pc, #580]	; (80025c8 <HAL_RCC_OscConfig+0x624>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e116      	b.n	80025ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238c:	4b8d      	ldr	r3, [pc, #564]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	2202      	movs	r2, #2
 8002392:	4013      	ands	r3, r2
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002396:	231f      	movs	r3, #31
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d105      	bne.n	80023ac <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a0:	4b88      	ldr	r3, [pc, #544]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 80023a2:	69da      	ldr	r2, [r3, #28]
 80023a4:	4b87      	ldr	r3, [pc, #540]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 80023a6:	4989      	ldr	r1, [pc, #548]	; (80025cc <HAL_RCC_OscConfig+0x628>)
 80023a8:	400a      	ands	r2, r1
 80023aa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2210      	movs	r2, #16
 80023b2:	4013      	ands	r3, r2
 80023b4:	d063      	beq.n	800247e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d12a      	bne.n	8002414 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80023be:	4b81      	ldr	r3, [pc, #516]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 80023c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023c2:	4b80      	ldr	r3, [pc, #512]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 80023c4:	2104      	movs	r1, #4
 80023c6:	430a      	orrs	r2, r1
 80023c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80023ca:	4b7e      	ldr	r3, [pc, #504]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 80023cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ce:	4b7d      	ldr	r3, [pc, #500]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 80023d0:	2101      	movs	r1, #1
 80023d2:	430a      	orrs	r2, r1
 80023d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d6:	f7fe fe19 	bl	800100c <HAL_GetTick>
 80023da:	0003      	movs	r3, r0
 80023dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80023e0:	f7fe fe14 	bl	800100c <HAL_GetTick>
 80023e4:	0002      	movs	r2, r0
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e0e3      	b.n	80025ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80023f2:	4b74      	ldr	r3, [pc, #464]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 80023f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f6:	2202      	movs	r2, #2
 80023f8:	4013      	ands	r3, r2
 80023fa:	d0f1      	beq.n	80023e0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80023fc:	4b71      	ldr	r3, [pc, #452]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 80023fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002400:	22f8      	movs	r2, #248	; 0xf8
 8002402:	4393      	bics	r3, r2
 8002404:	0019      	movs	r1, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	00da      	lsls	r2, r3, #3
 800240c:	4b6d      	ldr	r3, [pc, #436]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 800240e:	430a      	orrs	r2, r1
 8002410:	635a      	str	r2, [r3, #52]	; 0x34
 8002412:	e034      	b.n	800247e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	3305      	adds	r3, #5
 800241a:	d111      	bne.n	8002440 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800241c:	4b69      	ldr	r3, [pc, #420]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 800241e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002420:	4b68      	ldr	r3, [pc, #416]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 8002422:	2104      	movs	r1, #4
 8002424:	438a      	bics	r2, r1
 8002426:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002428:	4b66      	ldr	r3, [pc, #408]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 800242a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800242c:	22f8      	movs	r2, #248	; 0xf8
 800242e:	4393      	bics	r3, r2
 8002430:	0019      	movs	r1, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	00da      	lsls	r2, r3, #3
 8002438:	4b62      	ldr	r3, [pc, #392]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 800243a:	430a      	orrs	r2, r1
 800243c:	635a      	str	r2, [r3, #52]	; 0x34
 800243e:	e01e      	b.n	800247e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002440:	4b60      	ldr	r3, [pc, #384]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 8002442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002444:	4b5f      	ldr	r3, [pc, #380]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 8002446:	2104      	movs	r1, #4
 8002448:	430a      	orrs	r2, r1
 800244a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800244c:	4b5d      	ldr	r3, [pc, #372]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 800244e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002450:	4b5c      	ldr	r3, [pc, #368]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 8002452:	2101      	movs	r1, #1
 8002454:	438a      	bics	r2, r1
 8002456:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002458:	f7fe fdd8 	bl	800100c <HAL_GetTick>
 800245c:	0003      	movs	r3, r0
 800245e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002462:	f7fe fdd3 	bl	800100c <HAL_GetTick>
 8002466:	0002      	movs	r2, r0
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e0a2      	b.n	80025ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002474:	4b53      	ldr	r3, [pc, #332]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 8002476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002478:	2202      	movs	r2, #2
 800247a:	4013      	ands	r3, r2
 800247c:	d1f1      	bne.n	8002462 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d100      	bne.n	8002488 <HAL_RCC_OscConfig+0x4e4>
 8002486:	e097      	b.n	80025b8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002488:	4b4e      	ldr	r3, [pc, #312]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	220c      	movs	r2, #12
 800248e:	4013      	ands	r3, r2
 8002490:	2b08      	cmp	r3, #8
 8002492:	d100      	bne.n	8002496 <HAL_RCC_OscConfig+0x4f2>
 8002494:	e06b      	b.n	800256e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d14c      	bne.n	8002538 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249e:	4b49      	ldr	r3, [pc, #292]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	4b48      	ldr	r3, [pc, #288]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 80024a4:	494a      	ldr	r1, [pc, #296]	; (80025d0 <HAL_RCC_OscConfig+0x62c>)
 80024a6:	400a      	ands	r2, r1
 80024a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024aa:	f7fe fdaf 	bl	800100c <HAL_GetTick>
 80024ae:	0003      	movs	r3, r0
 80024b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b4:	f7fe fdaa 	bl	800100c <HAL_GetTick>
 80024b8:	0002      	movs	r2, r0
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e079      	b.n	80025ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c6:	4b3f      	ldr	r3, [pc, #252]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	049b      	lsls	r3, r3, #18
 80024ce:	4013      	ands	r3, r2
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d2:	4b3c      	ldr	r3, [pc, #240]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d6:	220f      	movs	r2, #15
 80024d8:	4393      	bics	r3, r2
 80024da:	0019      	movs	r1, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e0:	4b38      	ldr	r3, [pc, #224]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 80024e2:	430a      	orrs	r2, r1
 80024e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80024e6:	4b37      	ldr	r3, [pc, #220]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	4a3a      	ldr	r2, [pc, #232]	; (80025d4 <HAL_RCC_OscConfig+0x630>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	0019      	movs	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	431a      	orrs	r2, r3
 80024fa:	4b32      	ldr	r3, [pc, #200]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 80024fc:	430a      	orrs	r2, r1
 80024fe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002500:	4b30      	ldr	r3, [pc, #192]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4b2f      	ldr	r3, [pc, #188]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 8002506:	2180      	movs	r1, #128	; 0x80
 8002508:	0449      	lsls	r1, r1, #17
 800250a:	430a      	orrs	r2, r1
 800250c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250e:	f7fe fd7d 	bl	800100c <HAL_GetTick>
 8002512:	0003      	movs	r3, r0
 8002514:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002518:	f7fe fd78 	bl	800100c <HAL_GetTick>
 800251c:	0002      	movs	r2, r0
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e047      	b.n	80025ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800252a:	4b26      	ldr	r3, [pc, #152]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	2380      	movs	r3, #128	; 0x80
 8002530:	049b      	lsls	r3, r3, #18
 8002532:	4013      	ands	r3, r2
 8002534:	d0f0      	beq.n	8002518 <HAL_RCC_OscConfig+0x574>
 8002536:	e03f      	b.n	80025b8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002538:	4b22      	ldr	r3, [pc, #136]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4b21      	ldr	r3, [pc, #132]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 800253e:	4924      	ldr	r1, [pc, #144]	; (80025d0 <HAL_RCC_OscConfig+0x62c>)
 8002540:	400a      	ands	r2, r1
 8002542:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7fe fd62 	bl	800100c <HAL_GetTick>
 8002548:	0003      	movs	r3, r0
 800254a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800254e:	f7fe fd5d 	bl	800100c <HAL_GetTick>
 8002552:	0002      	movs	r2, r0
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e02c      	b.n	80025ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002560:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	049b      	lsls	r3, r3, #18
 8002568:	4013      	ands	r3, r2
 800256a:	d1f0      	bne.n	800254e <HAL_RCC_OscConfig+0x5aa>
 800256c:	e024      	b.n	80025b8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d101      	bne.n	800257a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e01f      	b.n	80025ba <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800257a:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002580:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <HAL_RCC_OscConfig+0x620>)
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	025b      	lsls	r3, r3, #9
 800258c:	401a      	ands	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	429a      	cmp	r2, r3
 8002594:	d10e      	bne.n	80025b4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	220f      	movs	r2, #15
 800259a:	401a      	ands	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d107      	bne.n	80025b4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	23f0      	movs	r3, #240	; 0xf0
 80025a8:	039b      	lsls	r3, r3, #14
 80025aa:	401a      	ands	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	0018      	movs	r0, r3
 80025bc:	46bd      	mov	sp, r7
 80025be:	b008      	add	sp, #32
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	40021000 	.word	0x40021000
 80025c8:	00001388 	.word	0x00001388
 80025cc:	efffffff 	.word	0xefffffff
 80025d0:	feffffff 	.word	0xfeffffff
 80025d4:	ffc2ffff 	.word	0xffc2ffff

080025d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0b3      	b.n	8002754 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025ec:	4b5b      	ldr	r3, [pc, #364]	; (800275c <HAL_RCC_ClockConfig+0x184>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2201      	movs	r2, #1
 80025f2:	4013      	ands	r3, r2
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d911      	bls.n	800261e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fa:	4b58      	ldr	r3, [pc, #352]	; (800275c <HAL_RCC_ClockConfig+0x184>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2201      	movs	r2, #1
 8002600:	4393      	bics	r3, r2
 8002602:	0019      	movs	r1, r3
 8002604:	4b55      	ldr	r3, [pc, #340]	; (800275c <HAL_RCC_ClockConfig+0x184>)
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	430a      	orrs	r2, r1
 800260a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800260c:	4b53      	ldr	r3, [pc, #332]	; (800275c <HAL_RCC_ClockConfig+0x184>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2201      	movs	r2, #1
 8002612:	4013      	ands	r3, r2
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d001      	beq.n	800261e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e09a      	b.n	8002754 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2202      	movs	r2, #2
 8002624:	4013      	ands	r3, r2
 8002626:	d015      	beq.n	8002654 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2204      	movs	r2, #4
 800262e:	4013      	ands	r3, r2
 8002630:	d006      	beq.n	8002640 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002632:	4b4b      	ldr	r3, [pc, #300]	; (8002760 <HAL_RCC_ClockConfig+0x188>)
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	4b4a      	ldr	r3, [pc, #296]	; (8002760 <HAL_RCC_ClockConfig+0x188>)
 8002638:	21e0      	movs	r1, #224	; 0xe0
 800263a:	00c9      	lsls	r1, r1, #3
 800263c:	430a      	orrs	r2, r1
 800263e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002640:	4b47      	ldr	r3, [pc, #284]	; (8002760 <HAL_RCC_ClockConfig+0x188>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	22f0      	movs	r2, #240	; 0xf0
 8002646:	4393      	bics	r3, r2
 8002648:	0019      	movs	r1, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	4b44      	ldr	r3, [pc, #272]	; (8002760 <HAL_RCC_ClockConfig+0x188>)
 8002650:	430a      	orrs	r2, r1
 8002652:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2201      	movs	r2, #1
 800265a:	4013      	ands	r3, r2
 800265c:	d040      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d107      	bne.n	8002676 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002666:	4b3e      	ldr	r3, [pc, #248]	; (8002760 <HAL_RCC_ClockConfig+0x188>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	029b      	lsls	r3, r3, #10
 800266e:	4013      	ands	r3, r2
 8002670:	d114      	bne.n	800269c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e06e      	b.n	8002754 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d107      	bne.n	800268e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800267e:	4b38      	ldr	r3, [pc, #224]	; (8002760 <HAL_RCC_ClockConfig+0x188>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	2380      	movs	r3, #128	; 0x80
 8002684:	049b      	lsls	r3, r3, #18
 8002686:	4013      	ands	r3, r2
 8002688:	d108      	bne.n	800269c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e062      	b.n	8002754 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268e:	4b34      	ldr	r3, [pc, #208]	; (8002760 <HAL_RCC_ClockConfig+0x188>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2202      	movs	r2, #2
 8002694:	4013      	ands	r3, r2
 8002696:	d101      	bne.n	800269c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e05b      	b.n	8002754 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800269c:	4b30      	ldr	r3, [pc, #192]	; (8002760 <HAL_RCC_ClockConfig+0x188>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2203      	movs	r2, #3
 80026a2:	4393      	bics	r3, r2
 80026a4:	0019      	movs	r1, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	4b2d      	ldr	r3, [pc, #180]	; (8002760 <HAL_RCC_ClockConfig+0x188>)
 80026ac:	430a      	orrs	r2, r1
 80026ae:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026b0:	f7fe fcac 	bl	800100c <HAL_GetTick>
 80026b4:	0003      	movs	r3, r0
 80026b6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b8:	e009      	b.n	80026ce <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ba:	f7fe fca7 	bl	800100c <HAL_GetTick>
 80026be:	0002      	movs	r2, r0
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	4a27      	ldr	r2, [pc, #156]	; (8002764 <HAL_RCC_ClockConfig+0x18c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e042      	b.n	8002754 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ce:	4b24      	ldr	r3, [pc, #144]	; (8002760 <HAL_RCC_ClockConfig+0x188>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	220c      	movs	r2, #12
 80026d4:	401a      	ands	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	429a      	cmp	r2, r3
 80026de:	d1ec      	bne.n	80026ba <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026e0:	4b1e      	ldr	r3, [pc, #120]	; (800275c <HAL_RCC_ClockConfig+0x184>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2201      	movs	r2, #1
 80026e6:	4013      	ands	r3, r2
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d211      	bcs.n	8002712 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ee:	4b1b      	ldr	r3, [pc, #108]	; (800275c <HAL_RCC_ClockConfig+0x184>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2201      	movs	r2, #1
 80026f4:	4393      	bics	r3, r2
 80026f6:	0019      	movs	r1, r3
 80026f8:	4b18      	ldr	r3, [pc, #96]	; (800275c <HAL_RCC_ClockConfig+0x184>)
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002700:	4b16      	ldr	r3, [pc, #88]	; (800275c <HAL_RCC_ClockConfig+0x184>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2201      	movs	r2, #1
 8002706:	4013      	ands	r3, r2
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	429a      	cmp	r2, r3
 800270c:	d001      	beq.n	8002712 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e020      	b.n	8002754 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2204      	movs	r2, #4
 8002718:	4013      	ands	r3, r2
 800271a:	d009      	beq.n	8002730 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800271c:	4b10      	ldr	r3, [pc, #64]	; (8002760 <HAL_RCC_ClockConfig+0x188>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	4a11      	ldr	r2, [pc, #68]	; (8002768 <HAL_RCC_ClockConfig+0x190>)
 8002722:	4013      	ands	r3, r2
 8002724:	0019      	movs	r1, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <HAL_RCC_ClockConfig+0x188>)
 800272c:	430a      	orrs	r2, r1
 800272e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002730:	f000 f820 	bl	8002774 <HAL_RCC_GetSysClockFreq>
 8002734:	0001      	movs	r1, r0
 8002736:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <HAL_RCC_ClockConfig+0x188>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	091b      	lsrs	r3, r3, #4
 800273c:	220f      	movs	r2, #15
 800273e:	4013      	ands	r3, r2
 8002740:	4a0a      	ldr	r2, [pc, #40]	; (800276c <HAL_RCC_ClockConfig+0x194>)
 8002742:	5cd3      	ldrb	r3, [r2, r3]
 8002744:	000a      	movs	r2, r1
 8002746:	40da      	lsrs	r2, r3
 8002748:	4b09      	ldr	r3, [pc, #36]	; (8002770 <HAL_RCC_ClockConfig+0x198>)
 800274a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800274c:	2003      	movs	r0, #3
 800274e:	f7fe fc17 	bl	8000f80 <HAL_InitTick>
  
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	0018      	movs	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	b004      	add	sp, #16
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40022000 	.word	0x40022000
 8002760:	40021000 	.word	0x40021000
 8002764:	00001388 	.word	0x00001388
 8002768:	fffff8ff 	.word	0xfffff8ff
 800276c:	08003378 	.word	0x08003378
 8002770:	20000000 	.word	0x20000000

08002774 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	2300      	movs	r3, #0
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	2300      	movs	r3, #0
 8002788:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800278e:	4b20      	ldr	r3, [pc, #128]	; (8002810 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	220c      	movs	r2, #12
 8002798:	4013      	ands	r3, r2
 800279a:	2b04      	cmp	r3, #4
 800279c:	d002      	beq.n	80027a4 <HAL_RCC_GetSysClockFreq+0x30>
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d003      	beq.n	80027aa <HAL_RCC_GetSysClockFreq+0x36>
 80027a2:	e02c      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027a4:	4b1b      	ldr	r3, [pc, #108]	; (8002814 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027a6:	613b      	str	r3, [r7, #16]
      break;
 80027a8:	e02c      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	0c9b      	lsrs	r3, r3, #18
 80027ae:	220f      	movs	r2, #15
 80027b0:	4013      	ands	r3, r2
 80027b2:	4a19      	ldr	r2, [pc, #100]	; (8002818 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027b4:	5cd3      	ldrb	r3, [r2, r3]
 80027b6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80027b8:	4b15      	ldr	r3, [pc, #84]	; (8002810 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	220f      	movs	r2, #15
 80027be:	4013      	ands	r3, r2
 80027c0:	4a16      	ldr	r2, [pc, #88]	; (800281c <HAL_RCC_GetSysClockFreq+0xa8>)
 80027c2:	5cd3      	ldrb	r3, [r2, r3]
 80027c4:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	2380      	movs	r3, #128	; 0x80
 80027ca:	025b      	lsls	r3, r3, #9
 80027cc:	4013      	ands	r3, r2
 80027ce:	d009      	beq.n	80027e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	4810      	ldr	r0, [pc, #64]	; (8002814 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027d4:	f7fd fc98 	bl	8000108 <__udivsi3>
 80027d8:	0003      	movs	r3, r0
 80027da:	001a      	movs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4353      	muls	r3, r2
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	e009      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	000a      	movs	r2, r1
 80027e8:	0152      	lsls	r2, r2, #5
 80027ea:	1a52      	subs	r2, r2, r1
 80027ec:	0193      	lsls	r3, r2, #6
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	185b      	adds	r3, r3, r1
 80027f4:	021b      	lsls	r3, r3, #8
 80027f6:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	613b      	str	r3, [r7, #16]
      break;
 80027fc:	e002      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027fe:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002800:	613b      	str	r3, [r7, #16]
      break;
 8002802:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002804:	693b      	ldr	r3, [r7, #16]
}
 8002806:	0018      	movs	r0, r3
 8002808:	46bd      	mov	sp, r7
 800280a:	b006      	add	sp, #24
 800280c:	bd80      	pop	{r7, pc}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	40021000 	.word	0x40021000
 8002814:	007a1200 	.word	0x007a1200
 8002818:	08003388 	.word	0x08003388
 800281c:	08003398 	.word	0x08003398

08002820 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e0a8      	b.n	8002984 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	2b00      	cmp	r3, #0
 8002838:	d109      	bne.n	800284e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	2382      	movs	r3, #130	; 0x82
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	429a      	cmp	r2, r3
 8002844:	d009      	beq.n	800285a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	61da      	str	r2, [r3, #28]
 800284c:	e005      	b.n	800285a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	225d      	movs	r2, #93	; 0x5d
 8002864:	5c9b      	ldrb	r3, [r3, r2]
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d107      	bne.n	800287c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	225c      	movs	r2, #92	; 0x5c
 8002870:	2100      	movs	r1, #0
 8002872:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	0018      	movs	r0, r3
 8002878:	f7fe f82a 	bl	80008d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	225d      	movs	r2, #93	; 0x5d
 8002880:	2102      	movs	r1, #2
 8002882:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2140      	movs	r1, #64	; 0x40
 8002890:	438a      	bics	r2, r1
 8002892:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	23e0      	movs	r3, #224	; 0xe0
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	429a      	cmp	r2, r3
 800289e:	d902      	bls.n	80028a6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80028a0:	2300      	movs	r3, #0
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	e002      	b.n	80028ac <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	015b      	lsls	r3, r3, #5
 80028aa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68da      	ldr	r2, [r3, #12]
 80028b0:	23f0      	movs	r3, #240	; 0xf0
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d008      	beq.n	80028ca <HAL_SPI_Init+0xaa>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	23e0      	movs	r3, #224	; 0xe0
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d002      	beq.n	80028ca <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	2382      	movs	r3, #130	; 0x82
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	401a      	ands	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6899      	ldr	r1, [r3, #8]
 80028d8:	2384      	movs	r3, #132	; 0x84
 80028da:	021b      	lsls	r3, r3, #8
 80028dc:	400b      	ands	r3, r1
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	2102      	movs	r1, #2
 80028e6:	400b      	ands	r3, r1
 80028e8:	431a      	orrs	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	2101      	movs	r1, #1
 80028f0:	400b      	ands	r3, r1
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6999      	ldr	r1, [r3, #24]
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	400b      	ands	r3, r1
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	2138      	movs	r1, #56	; 0x38
 8002906:	400b      	ands	r3, r1
 8002908:	431a      	orrs	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	2180      	movs	r1, #128	; 0x80
 8002910:	400b      	ands	r3, r1
 8002912:	431a      	orrs	r2, r3
 8002914:	0011      	movs	r1, r2
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	019b      	lsls	r3, r3, #6
 800291e:	401a      	ands	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	0c1b      	lsrs	r3, r3, #16
 800292e:	2204      	movs	r2, #4
 8002930:	401a      	ands	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	2110      	movs	r1, #16
 8002938:	400b      	ands	r3, r1
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002940:	2108      	movs	r1, #8
 8002942:	400b      	ands	r3, r1
 8002944:	431a      	orrs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68d9      	ldr	r1, [r3, #12]
 800294a:	23f0      	movs	r3, #240	; 0xf0
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	400b      	ands	r3, r1
 8002950:	431a      	orrs	r2, r3
 8002952:	0011      	movs	r1, r2
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	2380      	movs	r3, #128	; 0x80
 8002958:	015b      	lsls	r3, r3, #5
 800295a:	401a      	ands	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	69da      	ldr	r2, [r3, #28]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4907      	ldr	r1, [pc, #28]	; (800298c <HAL_SPI_Init+0x16c>)
 8002970:	400a      	ands	r2, r1
 8002972:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	225d      	movs	r2, #93	; 0x5d
 800297e:	2101      	movs	r1, #1
 8002980:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	0018      	movs	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	b004      	add	sp, #16
 800298a:	bd80      	pop	{r7, pc}
 800298c:	fffff7ff 	.word	0xfffff7ff

08002990 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	1dbb      	adds	r3, r7, #6
 800299e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029a0:	231f      	movs	r3, #31
 80029a2:	18fb      	adds	r3, r7, r3
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	225c      	movs	r2, #92	; 0x5c
 80029ac:	5c9b      	ldrb	r3, [r3, r2]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d101      	bne.n	80029b6 <HAL_SPI_Transmit+0x26>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e147      	b.n	8002c46 <HAL_SPI_Transmit+0x2b6>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	225c      	movs	r2, #92	; 0x5c
 80029ba:	2101      	movs	r1, #1
 80029bc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029be:	f7fe fb25 	bl	800100c <HAL_GetTick>
 80029c2:	0003      	movs	r3, r0
 80029c4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80029c6:	2316      	movs	r3, #22
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	1dba      	adds	r2, r7, #6
 80029cc:	8812      	ldrh	r2, [r2, #0]
 80029ce:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	225d      	movs	r2, #93	; 0x5d
 80029d4:	5c9b      	ldrb	r3, [r3, r2]
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d004      	beq.n	80029e6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80029dc:	231f      	movs	r3, #31
 80029de:	18fb      	adds	r3, r7, r3
 80029e0:	2202      	movs	r2, #2
 80029e2:	701a      	strb	r2, [r3, #0]
    goto error;
 80029e4:	e128      	b.n	8002c38 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <HAL_SPI_Transmit+0x64>
 80029ec:	1dbb      	adds	r3, r7, #6
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d104      	bne.n	80029fe <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80029f4:	231f      	movs	r3, #31
 80029f6:	18fb      	adds	r3, r7, r3
 80029f8:	2201      	movs	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]
    goto error;
 80029fc:	e11c      	b.n	8002c38 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	225d      	movs	r2, #93	; 0x5d
 8002a02:	2103      	movs	r1, #3
 8002a04:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1dba      	adds	r2, r7, #6
 8002a16:	8812      	ldrh	r2, [r2, #0]
 8002a18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	1dba      	adds	r2, r7, #6
 8002a1e:	8812      	ldrh	r2, [r2, #0]
 8002a20:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2244      	movs	r2, #68	; 0x44
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2246      	movs	r2, #70	; 0x46
 8002a34:	2100      	movs	r1, #0
 8002a36:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	2380      	movs	r3, #128	; 0x80
 8002a4a:	021b      	lsls	r3, r3, #8
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d110      	bne.n	8002a72 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2140      	movs	r1, #64	; 0x40
 8002a5c:	438a      	bics	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2180      	movs	r1, #128	; 0x80
 8002a6c:	01c9      	lsls	r1, r1, #7
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2240      	movs	r2, #64	; 0x40
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b40      	cmp	r3, #64	; 0x40
 8002a7e:	d007      	beq.n	8002a90 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2140      	movs	r1, #64	; 0x40
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	68da      	ldr	r2, [r3, #12]
 8002a94:	23e0      	movs	r3, #224	; 0xe0
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d952      	bls.n	8002b42 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d004      	beq.n	8002aae <HAL_SPI_Transmit+0x11e>
 8002aa4:	2316      	movs	r3, #22
 8002aa6:	18fb      	adds	r3, r7, r3
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d143      	bne.n	8002b36 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab2:	881a      	ldrh	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abe:	1c9a      	adds	r2, r3, #2
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	3b01      	subs	r3, #1
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ad2:	e030      	b.n	8002b36 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2202      	movs	r2, #2
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d112      	bne.n	8002b08 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae6:	881a      	ldrh	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af2:	1c9a      	adds	r2, r3, #2
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b06:	e016      	b.n	8002b36 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b08:	f7fe fa80 	bl	800100c <HAL_GetTick>
 8002b0c:	0002      	movs	r2, r0
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d802      	bhi.n	8002b1e <HAL_SPI_Transmit+0x18e>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	d102      	bne.n	8002b24 <HAL_SPI_Transmit+0x194>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d108      	bne.n	8002b36 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002b24:	231f      	movs	r3, #31
 8002b26:	18fb      	adds	r3, r7, r3
 8002b28:	2203      	movs	r2, #3
 8002b2a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	225d      	movs	r2, #93	; 0x5d
 8002b30:	2101      	movs	r1, #1
 8002b32:	5499      	strb	r1, [r3, r2]
          goto error;
 8002b34:	e080      	b.n	8002c38 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1c9      	bne.n	8002ad4 <HAL_SPI_Transmit+0x144>
 8002b40:	e053      	b.n	8002bea <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d004      	beq.n	8002b54 <HAL_SPI_Transmit+0x1c4>
 8002b4a:	2316      	movs	r3, #22
 8002b4c:	18fb      	adds	r3, r7, r3
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d145      	bne.n	8002be0 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	330c      	adds	r3, #12
 8002b5e:	7812      	ldrb	r2, [r2, #0]
 8002b60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002b7a:	e031      	b.n	8002be0 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2202      	movs	r2, #2
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d113      	bne.n	8002bb2 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	330c      	adds	r3, #12
 8002b94:	7812      	ldrb	r2, [r2, #0]
 8002b96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bb0:	e016      	b.n	8002be0 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bb2:	f7fe fa2b 	bl	800100c <HAL_GetTick>
 8002bb6:	0002      	movs	r2, r0
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d802      	bhi.n	8002bc8 <HAL_SPI_Transmit+0x238>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	d102      	bne.n	8002bce <HAL_SPI_Transmit+0x23e>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d108      	bne.n	8002be0 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002bce:	231f      	movs	r3, #31
 8002bd0:	18fb      	adds	r3, r7, r3
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	225d      	movs	r2, #93	; 0x5d
 8002bda:	2101      	movs	r1, #1
 8002bdc:	5499      	strb	r1, [r3, r2]
          goto error;
 8002bde:	e02b      	b.n	8002c38 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1c8      	bne.n	8002b7c <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	6839      	ldr	r1, [r7, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f000 fb3f 	bl	8003274 <SPI_EndRxTxTransaction>
 8002bf6:	1e03      	subs	r3, r0, #0
 8002bf8:	d002      	beq.n	8002c00 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10a      	bne.n	8002c1e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c08:	2300      	movs	r3, #0
 8002c0a:	613b      	str	r3, [r7, #16]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	613b      	str	r3, [r7, #16]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	613b      	str	r3, [r7, #16]
 8002c1c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d004      	beq.n	8002c30 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002c26:	231f      	movs	r3, #31
 8002c28:	18fb      	adds	r3, r7, r3
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	701a      	strb	r2, [r3, #0]
 8002c2e:	e003      	b.n	8002c38 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	225d      	movs	r2, #93	; 0x5d
 8002c34:	2101      	movs	r1, #1
 8002c36:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	225c      	movs	r2, #92	; 0x5c
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002c40:	231f      	movs	r3, #31
 8002c42:	18fb      	adds	r3, r7, r3
 8002c44:	781b      	ldrb	r3, [r3, #0]
}
 8002c46:	0018      	movs	r0, r3
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	b008      	add	sp, #32
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08a      	sub	sp, #40	; 0x28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	001a      	movs	r2, r3
 8002c5e:	1cbb      	adds	r3, r7, #2
 8002c60:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c62:	2301      	movs	r3, #1
 8002c64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c66:	2323      	movs	r3, #35	; 0x23
 8002c68:	18fb      	adds	r3, r7, r3
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	225c      	movs	r2, #92	; 0x5c
 8002c72:	5c9b      	ldrb	r3, [r3, r2]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <HAL_SPI_TransmitReceive+0x2c>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e1c4      	b.n	8003006 <HAL_SPI_TransmitReceive+0x3b6>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	225c      	movs	r2, #92	; 0x5c
 8002c80:	2101      	movs	r1, #1
 8002c82:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c84:	f7fe f9c2 	bl	800100c <HAL_GetTick>
 8002c88:	0003      	movs	r3, r0
 8002c8a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c8c:	201b      	movs	r0, #27
 8002c8e:	183b      	adds	r3, r7, r0
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	215d      	movs	r1, #93	; 0x5d
 8002c94:	5c52      	ldrb	r2, [r2, r1]
 8002c96:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002c9e:	2312      	movs	r3, #18
 8002ca0:	18fb      	adds	r3, r7, r3
 8002ca2:	1cba      	adds	r2, r7, #2
 8002ca4:	8812      	ldrh	r2, [r2, #0]
 8002ca6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ca8:	183b      	adds	r3, r7, r0
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d011      	beq.n	8002cd4 <HAL_SPI_TransmitReceive+0x84>
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	2382      	movs	r3, #130	; 0x82
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d107      	bne.n	8002cca <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d103      	bne.n	8002cca <HAL_SPI_TransmitReceive+0x7a>
 8002cc2:	183b      	adds	r3, r7, r0
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d004      	beq.n	8002cd4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002cca:	2323      	movs	r3, #35	; 0x23
 8002ccc:	18fb      	adds	r3, r7, r3
 8002cce:	2202      	movs	r2, #2
 8002cd0:	701a      	strb	r2, [r3, #0]
    goto error;
 8002cd2:	e191      	b.n	8002ff8 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d006      	beq.n	8002ce8 <HAL_SPI_TransmitReceive+0x98>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_SPI_TransmitReceive+0x98>
 8002ce0:	1cbb      	adds	r3, r7, #2
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d104      	bne.n	8002cf2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002ce8:	2323      	movs	r3, #35	; 0x23
 8002cea:	18fb      	adds	r3, r7, r3
 8002cec:	2201      	movs	r2, #1
 8002cee:	701a      	strb	r2, [r3, #0]
    goto error;
 8002cf0:	e182      	b.n	8002ff8 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	225d      	movs	r2, #93	; 0x5d
 8002cf6:	5c9b      	ldrb	r3, [r3, r2]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d003      	beq.n	8002d06 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	225d      	movs	r2, #93	; 0x5d
 8002d02:	2105      	movs	r1, #5
 8002d04:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1cba      	adds	r2, r7, #2
 8002d16:	2146      	movs	r1, #70	; 0x46
 8002d18:	8812      	ldrh	r2, [r2, #0]
 8002d1a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	1cba      	adds	r2, r7, #2
 8002d20:	2144      	movs	r1, #68	; 0x44
 8002d22:	8812      	ldrh	r2, [r2, #0]
 8002d24:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	1cba      	adds	r2, r7, #2
 8002d30:	8812      	ldrh	r2, [r2, #0]
 8002d32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	1cba      	adds	r2, r7, #2
 8002d38:	8812      	ldrh	r2, [r2, #0]
 8002d3a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	23e0      	movs	r3, #224	; 0xe0
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d908      	bls.n	8002d66 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	49ac      	ldr	r1, [pc, #688]	; (8003010 <HAL_SPI_TransmitReceive+0x3c0>)
 8002d60:	400a      	ands	r2, r1
 8002d62:	605a      	str	r2, [r3, #4]
 8002d64:	e008      	b.n	8002d78 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2180      	movs	r1, #128	; 0x80
 8002d72:	0149      	lsls	r1, r1, #5
 8002d74:	430a      	orrs	r2, r1
 8002d76:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2240      	movs	r2, #64	; 0x40
 8002d80:	4013      	ands	r3, r2
 8002d82:	2b40      	cmp	r3, #64	; 0x40
 8002d84:	d007      	beq.n	8002d96 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2140      	movs	r1, #64	; 0x40
 8002d92:	430a      	orrs	r2, r1
 8002d94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	23e0      	movs	r3, #224	; 0xe0
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d800      	bhi.n	8002da4 <HAL_SPI_TransmitReceive+0x154>
 8002da2:	e083      	b.n	8002eac <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <HAL_SPI_TransmitReceive+0x168>
 8002dac:	2312      	movs	r3, #18
 8002dae:	18fb      	adds	r3, r7, r3
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d000      	beq.n	8002db8 <HAL_SPI_TransmitReceive+0x168>
 8002db6:	e06d      	b.n	8002e94 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbc:	881a      	ldrh	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc8:	1c9a      	adds	r2, r3, #2
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ddc:	e05a      	b.n	8002e94 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	2202      	movs	r2, #2
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d11b      	bne.n	8002e24 <HAL_SPI_TransmitReceive+0x1d4>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d016      	beq.n	8002e24 <HAL_SPI_TransmitReceive+0x1d4>
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d113      	bne.n	8002e24 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e00:	881a      	ldrh	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0c:	1c9a      	adds	r2, r3, #2
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d11c      	bne.n	8002e6c <HAL_SPI_TransmitReceive+0x21c>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2246      	movs	r2, #70	; 0x46
 8002e36:	5a9b      	ldrh	r3, [r3, r2]
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d016      	beq.n	8002e6c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	b292      	uxth	r2, r2
 8002e4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	1c9a      	adds	r2, r3, #2
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2246      	movs	r2, #70	; 0x46
 8002e5a:	5a9b      	ldrh	r3, [r3, r2]
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b299      	uxth	r1, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2246      	movs	r2, #70	; 0x46
 8002e66:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e6c:	f7fe f8ce 	bl	800100c <HAL_GetTick>
 8002e70:	0002      	movs	r2, r0
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d80b      	bhi.n	8002e94 <HAL_SPI_TransmitReceive+0x244>
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7e:	3301      	adds	r3, #1
 8002e80:	d008      	beq.n	8002e94 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8002e82:	2323      	movs	r3, #35	; 0x23
 8002e84:	18fb      	adds	r3, r7, r3
 8002e86:	2203      	movs	r2, #3
 8002e88:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	225d      	movs	r2, #93	; 0x5d
 8002e8e:	2101      	movs	r1, #1
 8002e90:	5499      	strb	r1, [r3, r2]
        goto error;
 8002e92:	e0b1      	b.n	8002ff8 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d19f      	bne.n	8002dde <HAL_SPI_TransmitReceive+0x18e>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2246      	movs	r2, #70	; 0x46
 8002ea2:	5a9b      	ldrh	r3, [r3, r2]
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d199      	bne.n	8002dde <HAL_SPI_TransmitReceive+0x18e>
 8002eaa:	e089      	b.n	8002fc0 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <HAL_SPI_TransmitReceive+0x270>
 8002eb4:	2312      	movs	r3, #18
 8002eb6:	18fb      	adds	r3, r7, r3
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d000      	beq.n	8002ec0 <HAL_SPI_TransmitReceive+0x270>
 8002ebe:	e074      	b.n	8002faa <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	330c      	adds	r3, #12
 8002eca:	7812      	ldrb	r2, [r2, #0]
 8002ecc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed2:	1c5a      	adds	r2, r3, #1
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ee6:	e060      	b.n	8002faa <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d11c      	bne.n	8002f30 <HAL_SPI_TransmitReceive+0x2e0>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d017      	beq.n	8002f30 <HAL_SPI_TransmitReceive+0x2e0>
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d114      	bne.n	8002f30 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	330c      	adds	r3, #12
 8002f10:	7812      	ldrb	r2, [r2, #0]
 8002f12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2201      	movs	r2, #1
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d11e      	bne.n	8002f7c <HAL_SPI_TransmitReceive+0x32c>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2246      	movs	r2, #70	; 0x46
 8002f42:	5a9b      	ldrh	r3, [r3, r2]
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d018      	beq.n	8002f7c <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	330c      	adds	r3, #12
 8002f50:	001a      	movs	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	7812      	ldrb	r2, [r2, #0]
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2246      	movs	r2, #70	; 0x46
 8002f6a:	5a9b      	ldrh	r3, [r3, r2]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b299      	uxth	r1, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2246      	movs	r2, #70	; 0x46
 8002f76:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f7c:	f7fe f846 	bl	800100c <HAL_GetTick>
 8002f80:	0002      	movs	r2, r0
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d802      	bhi.n	8002f92 <HAL_SPI_TransmitReceive+0x342>
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8e:	3301      	adds	r3, #1
 8002f90:	d102      	bne.n	8002f98 <HAL_SPI_TransmitReceive+0x348>
 8002f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d108      	bne.n	8002faa <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8002f98:	2323      	movs	r3, #35	; 0x23
 8002f9a:	18fb      	adds	r3, r7, r3
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	225d      	movs	r2, #93	; 0x5d
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	5499      	strb	r1, [r3, r2]
        goto error;
 8002fa8:	e026      	b.n	8002ff8 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d199      	bne.n	8002ee8 <HAL_SPI_TransmitReceive+0x298>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2246      	movs	r2, #70	; 0x46
 8002fb8:	5a9b      	ldrh	r3, [r3, r2]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d193      	bne.n	8002ee8 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fc0:	69fa      	ldr	r2, [r7, #28]
 8002fc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f000 f954 	bl	8003274 <SPI_EndRxTxTransaction>
 8002fcc:	1e03      	subs	r3, r0, #0
 8002fce:	d006      	beq.n	8002fde <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8002fd0:	2323      	movs	r3, #35	; 0x23
 8002fd2:	18fb      	adds	r3, r7, r3
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d004      	beq.n	8002ff0 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8002fe6:	2323      	movs	r3, #35	; 0x23
 8002fe8:	18fb      	adds	r3, r7, r3
 8002fea:	2201      	movs	r2, #1
 8002fec:	701a      	strb	r2, [r3, #0]
 8002fee:	e003      	b.n	8002ff8 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	225d      	movs	r2, #93	; 0x5d
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	225c      	movs	r2, #92	; 0x5c
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003000:	2323      	movs	r3, #35	; 0x23
 8003002:	18fb      	adds	r3, r7, r3
 8003004:	781b      	ldrb	r3, [r3, #0]
}
 8003006:	0018      	movs	r0, r3
 8003008:	46bd      	mov	sp, r7
 800300a:	b00a      	add	sp, #40	; 0x28
 800300c:	bd80      	pop	{r7, pc}
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	ffffefff 	.word	0xffffefff

08003014 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b088      	sub	sp, #32
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	603b      	str	r3, [r7, #0]
 8003020:	1dfb      	adds	r3, r7, #7
 8003022:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003024:	f7fd fff2 	bl	800100c <HAL_GetTick>
 8003028:	0002      	movs	r2, r0
 800302a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302c:	1a9b      	subs	r3, r3, r2
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	18d3      	adds	r3, r2, r3
 8003032:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003034:	f7fd ffea 	bl	800100c <HAL_GetTick>
 8003038:	0003      	movs	r3, r0
 800303a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800303c:	4b3a      	ldr	r3, [pc, #232]	; (8003128 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	015b      	lsls	r3, r3, #5
 8003042:	0d1b      	lsrs	r3, r3, #20
 8003044:	69fa      	ldr	r2, [r7, #28]
 8003046:	4353      	muls	r3, r2
 8003048:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800304a:	e058      	b.n	80030fe <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	3301      	adds	r3, #1
 8003050:	d055      	beq.n	80030fe <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003052:	f7fd ffdb 	bl	800100c <HAL_GetTick>
 8003056:	0002      	movs	r2, r0
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	69fa      	ldr	r2, [r7, #28]
 800305e:	429a      	cmp	r2, r3
 8003060:	d902      	bls.n	8003068 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d142      	bne.n	80030ee <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	21e0      	movs	r1, #224	; 0xe0
 8003074:	438a      	bics	r2, r1
 8003076:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	2382      	movs	r3, #130	; 0x82
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	429a      	cmp	r2, r3
 8003082:	d113      	bne.n	80030ac <SPI_WaitFlagStateUntilTimeout+0x98>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	2380      	movs	r3, #128	; 0x80
 800308a:	021b      	lsls	r3, r3, #8
 800308c:	429a      	cmp	r2, r3
 800308e:	d005      	beq.n	800309c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	2380      	movs	r3, #128	; 0x80
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	429a      	cmp	r2, r3
 800309a:	d107      	bne.n	80030ac <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2140      	movs	r1, #64	; 0x40
 80030a8:	438a      	bics	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030b0:	2380      	movs	r3, #128	; 0x80
 80030b2:	019b      	lsls	r3, r3, #6
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d110      	bne.n	80030da <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	491a      	ldr	r1, [pc, #104]	; (800312c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80030c4:	400a      	ands	r2, r1
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2180      	movs	r1, #128	; 0x80
 80030d4:	0189      	lsls	r1, r1, #6
 80030d6:	430a      	orrs	r2, r1
 80030d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	225d      	movs	r2, #93	; 0x5d
 80030de:	2101      	movs	r1, #1
 80030e0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	225c      	movs	r2, #92	; 0x5c
 80030e6:	2100      	movs	r1, #0
 80030e8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e017      	b.n	800311e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	4013      	ands	r3, r2
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	425a      	negs	r2, r3
 800310e:	4153      	adcs	r3, r2
 8003110:	b2db      	uxtb	r3, r3
 8003112:	001a      	movs	r2, r3
 8003114:	1dfb      	adds	r3, r7, #7
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d197      	bne.n	800304c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	0018      	movs	r0, r3
 8003120:	46bd      	mov	sp, r7
 8003122:	b008      	add	sp, #32
 8003124:	bd80      	pop	{r7, pc}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	20000000 	.word	0x20000000
 800312c:	ffffdfff 	.word	0xffffdfff

08003130 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08a      	sub	sp, #40	; 0x28
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800313e:	2317      	movs	r3, #23
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	2200      	movs	r2, #0
 8003144:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003146:	f7fd ff61 	bl	800100c <HAL_GetTick>
 800314a:	0002      	movs	r2, r0
 800314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	18d3      	adds	r3, r2, r3
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003156:	f7fd ff59 	bl	800100c <HAL_GetTick>
 800315a:	0003      	movs	r3, r0
 800315c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	330c      	adds	r3, #12
 8003164:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003166:	4b41      	ldr	r3, [pc, #260]	; (800326c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	0013      	movs	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	189b      	adds	r3, r3, r2
 8003170:	00da      	lsls	r2, r3, #3
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	0d1b      	lsrs	r3, r3, #20
 8003176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003178:	4353      	muls	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800317c:	e068      	b.n	8003250 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	23c0      	movs	r3, #192	; 0xc0
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	429a      	cmp	r2, r3
 8003186:	d10a      	bne.n	800319e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d107      	bne.n	800319e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	b2da      	uxtb	r2, r3
 8003194:	2117      	movs	r1, #23
 8003196:	187b      	adds	r3, r7, r1
 8003198:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800319a:	187b      	adds	r3, r7, r1
 800319c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	3301      	adds	r3, #1
 80031a2:	d055      	beq.n	8003250 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031a4:	f7fd ff32 	bl	800100c <HAL_GetTick>
 80031a8:	0002      	movs	r2, r0
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d902      	bls.n	80031ba <SPI_WaitFifoStateUntilTimeout+0x8a>
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d142      	bne.n	8003240 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	21e0      	movs	r1, #224	; 0xe0
 80031c6:	438a      	bics	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	2382      	movs	r3, #130	; 0x82
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d113      	bne.n	80031fe <SPI_WaitFifoStateUntilTimeout+0xce>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	2380      	movs	r3, #128	; 0x80
 80031dc:	021b      	lsls	r3, r3, #8
 80031de:	429a      	cmp	r2, r3
 80031e0:	d005      	beq.n	80031ee <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	2380      	movs	r3, #128	; 0x80
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d107      	bne.n	80031fe <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2140      	movs	r1, #64	; 0x40
 80031fa:	438a      	bics	r2, r1
 80031fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003202:	2380      	movs	r3, #128	; 0x80
 8003204:	019b      	lsls	r3, r3, #6
 8003206:	429a      	cmp	r2, r3
 8003208:	d110      	bne.n	800322c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4916      	ldr	r1, [pc, #88]	; (8003270 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003216:	400a      	ands	r2, r1
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	0189      	lsls	r1, r1, #6
 8003228:	430a      	orrs	r2, r1
 800322a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	225d      	movs	r2, #93	; 0x5d
 8003230:	2101      	movs	r1, #1
 8003232:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	225c      	movs	r2, #92	; 0x5c
 8003238:	2100      	movs	r1, #0
 800323a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e010      	b.n	8003262 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003246:	2300      	movs	r3, #0
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	3b01      	subs	r3, #1
 800324e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	4013      	ands	r3, r2
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	429a      	cmp	r2, r3
 800325e:	d18e      	bne.n	800317e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	0018      	movs	r0, r3
 8003264:	46bd      	mov	sp, r7
 8003266:	b00a      	add	sp, #40	; 0x28
 8003268:	bd80      	pop	{r7, pc}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	20000000 	.word	0x20000000
 8003270:	ffffdfff 	.word	0xffffdfff

08003274 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af02      	add	r7, sp, #8
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	23c0      	movs	r3, #192	; 0xc0
 8003284:	0159      	lsls	r1, r3, #5
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	0013      	movs	r3, r2
 800328e:	2200      	movs	r2, #0
 8003290:	f7ff ff4e 	bl	8003130 <SPI_WaitFifoStateUntilTimeout>
 8003294:	1e03      	subs	r3, r0, #0
 8003296:	d007      	beq.n	80032a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800329c:	2220      	movs	r2, #32
 800329e:	431a      	orrs	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e027      	b.n	80032f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	0013      	movs	r3, r2
 80032b2:	2200      	movs	r2, #0
 80032b4:	2180      	movs	r1, #128	; 0x80
 80032b6:	f7ff fead 	bl	8003014 <SPI_WaitFlagStateUntilTimeout>
 80032ba:	1e03      	subs	r3, r0, #0
 80032bc:	d007      	beq.n	80032ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c2:	2220      	movs	r2, #32
 80032c4:	431a      	orrs	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e014      	b.n	80032f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	23c0      	movs	r3, #192	; 0xc0
 80032d2:	00d9      	lsls	r1, r3, #3
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	0013      	movs	r3, r2
 80032dc:	2200      	movs	r2, #0
 80032de:	f7ff ff27 	bl	8003130 <SPI_WaitFifoStateUntilTimeout>
 80032e2:	1e03      	subs	r3, r0, #0
 80032e4:	d007      	beq.n	80032f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ea:	2220      	movs	r2, #32
 80032ec:	431a      	orrs	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e000      	b.n	80032f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	0018      	movs	r0, r3
 80032fa:	46bd      	mov	sp, r7
 80032fc:	b004      	add	sp, #16
 80032fe:	bd80      	pop	{r7, pc}

08003300 <memset>:
 8003300:	0003      	movs	r3, r0
 8003302:	1882      	adds	r2, r0, r2
 8003304:	4293      	cmp	r3, r2
 8003306:	d100      	bne.n	800330a <memset+0xa>
 8003308:	4770      	bx	lr
 800330a:	7019      	strb	r1, [r3, #0]
 800330c:	3301      	adds	r3, #1
 800330e:	e7f9      	b.n	8003304 <memset+0x4>

08003310 <__libc_init_array>:
 8003310:	b570      	push	{r4, r5, r6, lr}
 8003312:	2600      	movs	r6, #0
 8003314:	4c0c      	ldr	r4, [pc, #48]	; (8003348 <__libc_init_array+0x38>)
 8003316:	4d0d      	ldr	r5, [pc, #52]	; (800334c <__libc_init_array+0x3c>)
 8003318:	1b64      	subs	r4, r4, r5
 800331a:	10a4      	asrs	r4, r4, #2
 800331c:	42a6      	cmp	r6, r4
 800331e:	d109      	bne.n	8003334 <__libc_init_array+0x24>
 8003320:	2600      	movs	r6, #0
 8003322:	f000 f819 	bl	8003358 <_init>
 8003326:	4c0a      	ldr	r4, [pc, #40]	; (8003350 <__libc_init_array+0x40>)
 8003328:	4d0a      	ldr	r5, [pc, #40]	; (8003354 <__libc_init_array+0x44>)
 800332a:	1b64      	subs	r4, r4, r5
 800332c:	10a4      	asrs	r4, r4, #2
 800332e:	42a6      	cmp	r6, r4
 8003330:	d105      	bne.n	800333e <__libc_init_array+0x2e>
 8003332:	bd70      	pop	{r4, r5, r6, pc}
 8003334:	00b3      	lsls	r3, r6, #2
 8003336:	58eb      	ldr	r3, [r5, r3]
 8003338:	4798      	blx	r3
 800333a:	3601      	adds	r6, #1
 800333c:	e7ee      	b.n	800331c <__libc_init_array+0xc>
 800333e:	00b3      	lsls	r3, r6, #2
 8003340:	58eb      	ldr	r3, [r5, r3]
 8003342:	4798      	blx	r3
 8003344:	3601      	adds	r6, #1
 8003346:	e7f2      	b.n	800332e <__libc_init_array+0x1e>
 8003348:	080033a8 	.word	0x080033a8
 800334c:	080033a8 	.word	0x080033a8
 8003350:	080033ac 	.word	0x080033ac
 8003354:	080033a8 	.word	0x080033a8

08003358 <_init>:
 8003358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800335e:	bc08      	pop	{r3}
 8003360:	469e      	mov	lr, r3
 8003362:	4770      	bx	lr

08003364 <_fini>:
 8003364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336a:	bc08      	pop	{r3}
 800336c:	469e      	mov	lr, r3
 800336e:	4770      	bx	lr
